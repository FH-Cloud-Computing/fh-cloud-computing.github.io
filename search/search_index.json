{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cloud Computing Fall 2020 Welcome to the Cloud Computing Fall 2020! On this page you will find all learning materials you need to learn in order to pass the course. Please note that this lecture is worth 4 ECTS. This is calculated to be roughly 112 hours of study (5-7 hours of study per week recommended). Lectures # Lectures are provided on the lectures page . Each lecture contains a text document, a PPTX, an audio book in MP3 and M4B (Apple) format, as well as a video . You can also listen to individual sections from the text document. All content is available in all formats so you only need to use the formats you prefer. You are expected to understand and memorize the \u201eIn a hurry?\u201d sections from the text version for the theory test. Practice # Practice sections are provided on the practice page . Each practice session is provided as a written tutorial and a video as well. All content is present in the video and the text so you only need to use the format you prefer. Source code is provided as a Git repository. You are expected to do each practice session at least once. Project work # Project work is based on the practice sessions . Your project work assignment is described on the project work page . Deadlines are described on the deadlines page . You are expected to hand in your project work continuously, please don't leave it for the last second. You have the option to hand in early. Online consultations & getting help. # Online consultations are provided on a regular basis. Please find detailed description on how to find help on the getting help page . Grading & testing # Grading is described on the grading page . Testing is described on the testing page . About us # Peter Wenzl # E-mail: peter.wenzl@edu.fh-campuswien.ac.at Computer Science Master (Dipl. Ing.), TU Wien, 2000 Telecoms Focused Career Ericsson Austria mobilkom Austria Oracle Austria GmBH (CGBU) Frequentis AG Janos Pasztor # E-mail: janos.pasztor@edu.fh-campuswien.ac.at Linkedin: www.linkedin.com/in/janoszen/ Website: pasztor.at Software developer and DevOps engineer background (10+ years experience) Web Focused Career Currently works as a Developer Advocate at A1 Telekom / A1 Digital / Exoscale Certified Kubernetes Application Developer","title":"Overview"},{"location":"#lectures","text":"Lectures are provided on the lectures page . Each lecture contains a text document, a PPTX, an audio book in MP3 and M4B (Apple) format, as well as a video . You can also listen to individual sections from the text document. All content is available in all formats so you only need to use the formats you prefer. You are expected to understand and memorize the \u201eIn a hurry?\u201d sections from the text version for the theory test.","title":"Lectures"},{"location":"#practice","text":"Practice sections are provided on the practice page . Each practice session is provided as a written tutorial and a video as well. All content is present in the video and the text so you only need to use the format you prefer. Source code is provided as a Git repository. You are expected to do each practice session at least once.","title":"Practice"},{"location":"#project_work","text":"Project work is based on the practice sessions . Your project work assignment is described on the project work page . Deadlines are described on the deadlines page . You are expected to hand in your project work continuously, please don't leave it for the last second. You have the option to hand in early.","title":"Project work"},{"location":"#online_consultations_getting_help","text":"Online consultations are provided on a regular basis. Please find detailed description on how to find help on the getting help page .","title":"Online consultations &amp; getting help."},{"location":"#grading_testing","text":"Grading is described on the grading page . Testing is described on the testing page .","title":"Grading &amp; testing"},{"location":"#about_us","text":"","title":"About us"},{"location":"#peter_wenzl","text":"E-mail: peter.wenzl@edu.fh-campuswien.ac.at Computer Science Master (Dipl. Ing.), TU Wien, 2000 Telecoms Focused Career Ericsson Austria mobilkom Austria Oracle Austria GmBH (CGBU) Frequentis AG","title":"Peter Wenzl"},{"location":"#janos_pasztor","text":"E-mail: janos.pasztor@edu.fh-campuswien.ac.at Linkedin: www.linkedin.com/in/janoszen/ Website: pasztor.at Software developer and DevOps engineer background (10+ years experience) Web Focused Career Currently works as a Developer Advocate at A1 Telekom / A1 Digital / Exoscale Certified Kubernetes Application Developer","title":"Janos Pasztor"},{"location":"deadlines/","text":"Each sprint has a hard deadline. Sprints can be handed in earlier. If a deadline is missed the points are not awarded and the solution is uploaded to GitHub so the next sprint can be accomplished. Sprint 1: Instance Pools # Deadline: 1 st of October 2020 In this sprint you must demonstrate your ability to set up an instance pool and a network load balancer. Pass criteria: your webservice must answer on an IP address and balance traffic across all instances running in an instance pool. The number of instances will be changed in the demonstration and your web service must adapt accordingly. Sprint 2: Monitoring # Deadline: 1 st of November 2020 In this sprint you must demonstrate your ability to monitor a varying number of instances set up on an instance pool in the previous sprint. Pass criteria: Your monitoring instance must be set up with Prometheus and Grafana running. Prometheus must track the instances in the instance pool using custom service discovery and collect their CPU usage in a graph in Grafana. Sprint 3: Autoscaling # Deadline: 1 st of December 2020 In this sprint you must demonstrate your ability to receive a webhook from Grafana and adjust the number of instances in the instance pool from the previous sprint under load. Pass criteria: Your service will be hit with a large number of requests and it must scale up as outlined in the project work document .","title":"Deadlines"},{"location":"deadlines/#sprint_1_instance_pools","text":"Deadline: 1 st of October 2020 In this sprint you must demonstrate your ability to set up an instance pool and a network load balancer. Pass criteria: your webservice must answer on an IP address and balance traffic across all instances running in an instance pool. The number of instances will be changed in the demonstration and your web service must adapt accordingly.","title":"Sprint 1: Instance Pools"},{"location":"deadlines/#sprint_2_monitoring","text":"Deadline: 1 st of November 2020 In this sprint you must demonstrate your ability to monitor a varying number of instances set up on an instance pool in the previous sprint. Pass criteria: Your monitoring instance must be set up with Prometheus and Grafana running. Prometheus must track the instances in the instance pool using custom service discovery and collect their CPU usage in a graph in Grafana.","title":"Sprint 2: Monitoring"},{"location":"deadlines/#sprint_3_autoscaling","text":"Deadline: 1 st of December 2020 In this sprint you must demonstrate your ability to receive a webhook from Grafana and adjust the number of instances in the instance pool from the previous sprint under load. Pass criteria: Your service will be hit with a large number of requests and it must scale up as outlined in the project work document .","title":"Sprint 3: Autoscaling"},{"location":"exercises/","text":"This section walks you through the technologies you will require to finish the project work. Keep in mind that this is but an introduction to the technologies you will use should you become a cloud engineer. It is designed to highlight how modern, cloud-native tools can be used to enhance the cloud beyond its capabilities. Exercise 1: IaaS # Create a virtual machine Automate software installation using user data Create a virtual machine pool Go to the exercise \u00bb Exercise 2: Terraform # Terraform basics Setting up a cloud provider connection Creating a virtual machine Using user data Creating a virtual machine pool Go to the exercise \u00bb Exercise 3: Containers # Writing a Dockerfile Building a container image Pushing to a registry Deploying using docker-compose Go to the exercise \u00bb Exercise 4: Prometheus # Prometheus basics Setting up Prometheus Setting up the node exporter Setting up service discovery Automating Prometheus deployment Go to the exercise \u00bb Exercise 5: Grafana # Grafana basics Setting up Grafana Integrating Grafana with Prometheus Setting up alerts Automating Grafana deployment Go to the exercise \u00bb Exercise 6: API integration # Creating a Grafana webhook microservice in Go Integrating the cloud API Go to the exercise \u00bb","title":"Overview"},{"location":"exercises/#exercise_1_iaas","text":"Create a virtual machine Automate software installation using user data Create a virtual machine pool Go to the exercise \u00bb","title":"Exercise 1: IaaS"},{"location":"exercises/#exercise_2_terraform","text":"Terraform basics Setting up a cloud provider connection Creating a virtual machine Using user data Creating a virtual machine pool Go to the exercise \u00bb","title":"Exercise 2: Terraform"},{"location":"exercises/#exercise_3_containers","text":"Writing a Dockerfile Building a container image Pushing to a registry Deploying using docker-compose Go to the exercise \u00bb","title":"Exercise 3: Containers"},{"location":"exercises/#exercise_4_prometheus","text":"Prometheus basics Setting up Prometheus Setting up the node exporter Setting up service discovery Automating Prometheus deployment Go to the exercise \u00bb","title":"Exercise 4: Prometheus"},{"location":"exercises/#exercise_5_grafana","text":"Grafana basics Setting up Grafana Integrating Grafana with Prometheus Setting up alerts Automating Grafana deployment Go to the exercise \u00bb","title":"Exercise 5: Grafana"},{"location":"exercises/#exercise_6_api_integration","text":"Creating a Grafana webhook microservice in Go Integrating the cloud API Go to the exercise \u00bb","title":"Exercise 6: API integration"},{"location":"exercises/1-iaas/","text":"Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac Introduction to the Cloud","title":"1. IaaS"},{"location":"exercises/2-terraform/","text":"Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac Terraform","title":"2. Terraform"},{"location":"exercises/3-containers/","text":"Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac Containers","title":"3. Containers"},{"location":"exercises/4-prometheus/","text":"Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac Prometheus","title":"4. Prometheus"},{"location":"exercises/5-grafana/","text":"Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac Grafana","title":"5. Grafana"},{"location":"exercises/6-api-integration/","text":"Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac API integration","title":"6. API integration"},{"location":"glossary/","text":"API # Application Program Interfaces are methods for programs to exchange data without the involvement of humans. APIs often involve a schematic description of how the data looks like and where it needs to be sent. Today many APIs are based on HTTP . HTTP # The Hypertext Transfer Protocol is the protocol that powers the world wide web allowing for the easy up- and download of data. With HTTP each file (resource) has a unique URL on a server and can be linked. Rack # A closet with standardized mounts for servers. Router # A network device that forwards layer 3 (IP) packets between separate networks. Switch # A network device that forwards Ethernet frames (packets) between devices. It does not perform layer 3 (IP) routing.","title":"A-Z"},{"location":"glossary/#api","text":"Application Program Interfaces are methods for programs to exchange data without the involvement of humans. APIs often involve a schematic description of how the data looks like and where it needs to be sent. Today many APIs are based on HTTP .","title":"API"},{"location":"glossary/#http","text":"The Hypertext Transfer Protocol is the protocol that powers the world wide web allowing for the easy up- and download of data. With HTTP each file (resource) has a unique URL on a server and can be linked.","title":"HTTP"},{"location":"glossary/#rack","text":"A closet with standardized mounts for servers.","title":"Rack"},{"location":"glossary/#router","text":"A network device that forwards layer 3 (IP) packets between separate networks.","title":"Router"},{"location":"glossary/#switch","text":"A network device that forwards Ethernet frames (packets) between devices. It does not perform layer 3 (IP) routing.","title":"Switch"},{"location":"grading/","text":"Grade construction # 55% written examination (individual). 45% project work (15% per sprint). Project work grading # 5% in each sprint for implementing it using an automation framework such as Terraform or Ansible. It must have the ability to install the exercise in an empty Exoscale account without human interaction. 10% in each sprint for demonstrating a working functionality. Marks # Positive grade: Minimum 60% score in written exam plus 60% of overall score required. 1 2 3 4 5 90% \u2014 100% 80% \u2014 89% 70% \u2014 79% 60% \u2014 69% <60%","title":"Grading"},{"location":"grading/#grade_construction","text":"55% written examination (individual). 45% project work (15% per sprint).","title":"Grade construction"},{"location":"grading/#project_work_grading","text":"5% in each sprint for implementing it using an automation framework such as Terraform or Ansible. It must have the ability to install the exercise in an empty Exoscale account without human interaction. 10% in each sprint for demonstrating a working functionality.","title":"Project work grading"},{"location":"grading/#marks","text":"Positive grade: Minimum 60% score in written exam plus 60% of overall score required. 1 2 3 4 5 90% \u2014 100% 80% \u2014 89% 70% \u2014 79% 60% \u2014 69% <60%","title":"Marks"},{"location":"help/","text":"Everybody needs help, and since this is a new situation we have prepared a few channels where you can get help. Before you ask for help # Make sure you strip the code you have a problem with of all unnecessary code, comments, etc. Make sure you upload your code to GitHub so others can take a look at it. Make sure you think through and describe your problem in more detail as you would in a conversation, as digitally it may be harder to follow. Where to ask for help # The primary avenue of getting help is on the Slack channel for this course . Join the weekly online consultation sessions. If you need to send us something, please do so on the email addresses on the introduction page .","title":"Getting help"},{"location":"help/#before_you_ask_for_help","text":"Make sure you strip the code you have a problem with of all unnecessary code, comments, etc. Make sure you upload your code to GitHub so others can take a look at it. Make sure you think through and describe your problem in more detail as you would in a conversation, as digitally it may be harder to follow.","title":"Before you ask for help"},{"location":"help/#where_to_ask_for_help","text":"The primary avenue of getting help is on the Slack channel for this course . Join the weekly online consultation sessions. If you need to send us something, please do so on the email addresses on the introduction page .","title":"Where to ask for help"},{"location":"lectures/","text":"Lecture 1: Introduction # Cloud building components IaaS, PaaS, SaaS Public vs. Private Cloud Basic \u201chosting\u201d service vs. managed service Business Models: Overbooking, Pay-per-Use, Standardization & Automation Benefits/Risks/Regulations: Scalability, Privacy, GDPR, Safe Harbor/Privacy Shield Go to lecture \u00bb Lecture 2: IaaS introduction # The history and inner workings of virtualization Virtual machines as a Service Storage in the Cloud Networking in the Cloud Go to lecture \u00bb Lecture 3: Beyond IaaS # Application load balancers CDNs Object Storage Databases as a Service (DBaaS) Functions as a Service (FaaS / Lambda) Containers as a Service (CaaS) Stream processing Deployment pipelines Go to lecture \u00bb Lecture 4: Containers # Containers vs. Virtual Machines The Dockerfile format Container runtimes Container orchestrators Container networking Go to lecture \u00bb Lecture 5: Cloud-native software development # 12-factor Apps Microservices Service meshes Frameworks and tools Go to lecture \u00bb","title":"Overview"},{"location":"lectures/#lecture_1_introduction","text":"Cloud building components IaaS, PaaS, SaaS Public vs. Private Cloud Basic \u201chosting\u201d service vs. managed service Business Models: Overbooking, Pay-per-Use, Standardization & Automation Benefits/Risks/Regulations: Scalability, Privacy, GDPR, Safe Harbor/Privacy Shield Go to lecture \u00bb","title":"Lecture 1: Introduction"},{"location":"lectures/#lecture_2_iaas_introduction","text":"The history and inner workings of virtualization Virtual machines as a Service Storage in the Cloud Networking in the Cloud Go to lecture \u00bb","title":"Lecture 2: IaaS introduction"},{"location":"lectures/#lecture_3_beyond_iaas","text":"Application load balancers CDNs Object Storage Databases as a Service (DBaaS) Functions as a Service (FaaS / Lambda) Containers as a Service (CaaS) Stream processing Deployment pipelines Go to lecture \u00bb","title":"Lecture 3: Beyond IaaS"},{"location":"lectures/#lecture_4_containers","text":"Containers vs. Virtual Machines The Dockerfile format Container runtimes Container orchestrators Container networking Go to lecture \u00bb","title":"Lecture 4: Containers"},{"location":"lectures/#lecture_5_cloud-native_software_development","text":"12-factor Apps Microservices Service meshes Frameworks and tools Go to lecture \u00bb","title":"Lecture 5: Cloud-native software development"},{"location":"lectures/1-cloud-intro/","text":"Download PPTX \ud83d\udcbb Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac Introduction to the Cloud As the popular saying goes: The cloud is just somebody else's computer. There is no magic, just using the cloud does not magically solve problems we are having with a traditional infrastructure. This lecture will teach you how a cloud is built and what the typical services are that they offer as well as the pitfalls which may come with such setups. What is a Server? # In a hurry? Servers: Nowadays either x86 or ARM architecture. Redundant, hot-swap hardware (power supply, fans, etc). Flat build profile for rack mounts. Out-Of-Bounds management interface for monitoring and remote management. Power consumption is a concern. Buying servers can take a long time and present an up-front investment. In older times, servers were completely different from the machines we used for regular work. Not just in weight and form factor, but in architecture. The landscape would stretch from SPARC and Power architectures to the x86 architecture we use in our PCs. Over time, however, the x86 architecture took over to the point where a server today, from an architectural standpoint, is exactly the same as the machine you are using right now. This means that you can copy the machine you are using onto a server and chances are it will run without any modification. The only notable exception is the rise of the ARM architecture which is popular in phones and tables and is known for its low power consumption. In recent years there has been a small but noticeable trend to run ARM in a datacenter. At home it may not matter if your computer uses 200 or 300 watts of power. In a datacenter, at the scale of hundreds, thousands or tens of thousands of servers, saving even a few percent of power will translate to huge cost savings. The difference in build is, however, quite apparent. While some servers, mainly built for office use, have the standard \u201ctower\u201d build, most servers have a flat profile designed to be mounted in racks as displayed on the picture. Since most servers are not high enough to take full size expansion cards (graphics cards, network cards, etc), servers may contain a separate removable component for these usually called a riser. An HP Proliant G5 server pulled out of its rack. Source: Wikipedia Server racks are standardized closets that have mounting screws for rails that allow pulling servers out even mid operation and replace components while the server is running. Servers also come with a high level of redundancy. While you may have a single power supply in your home computer, servers typically have two that are able to take power from different power inputs. This makes sure that the server keeps running even if one of the two power supplies fail, or if one of the two power inputs goes down. Also in contrast to your home setup these servers contain an Out-Of-Bounds Management interface that allows remote management of servers even when they are turned off. The hardware components built into the server report their health status to this OOB management interface which allows for the simultaneous monitoring of thousands of machines. Note This is a fairly generic description of servers. Different vendors may chose to leave out certain features of their more \u201cbudget\u201d line of servers, or call certain components differently. HP, for example, calls their OOBM \u201cIntegrated Lights Out\u201d, Dell \u201cDRAC - Dell Remote Access Control\u201d, etc. When it comes to purchasing servers larger companies tend to go with the same components for a longer period of time and they also buy support from the vendor. This sometimes includes hardware replacement done entirely by the vendor in the datacenter without the need for the customer to have staff on site. However, purchasing a specific set of components or ordering larger quantities of servers presents a logistics challenge and can sometimes take up to 3-4 months. Buying hardware is also an up-front investment which is hard to justify when demands change rapidly. What components are redundant in a server? Power supply CPU RAM Fan OOBM What is the purpose of an OOBM? Remotely manage a server Receive hardware malfunction alerts The Anatomy of a Datacenter # In a hurry? Datacenter components: Racks to house servers. Larger customers have cages for their racks. Cabling under the floor. Redundant cooling, fire suppression systems and power supply. Some datacenters provide internet connectivity. Eco friendliness is becoming a factor. Since the cloud is just somebody else's computer, that computer needs to be hosted somewhere. Servers are almost exclusively hosted in datacenters. Let's take a look at what is involved in running a datacenter. First of all, as mentioned above, most servers are going to be rack-mounted so you need a bunch of racks. These racks are installed in rows, often with a fake floor to allow for cabling to go under the floor. A datacenter with racks. Source: Wikipedia Since servers produce a lot of heat, a datacenter also requires cooling. There are a variety of ways to solve cooling, some are more \u201cgreen\u201d than others. Some datacenters, for example, opt to install a \u201ccold aisles\u201d where the cold air is pumped between two rack rows and is pushed through the racks to cool the servers. Apart from cooling, datacenters also require automated fire suppression systems simply because of the amount of electricity going through. Datacenters usually go with a non-destructive fire suppression system such as lowering the oxygen content of the air enough to stop the fire. All critical systems in a datacenter (power, cooling, fire suppression systems) are usually built in a redundant fashion because the loss of either of those systems will potentially mean a complete shutdown for the datacenter. Datacenter operators usually have further contingency plans in place, too, such as a UPS (battery) system, diesel generator, fuel truck on standby, hotline to the fire department, etc. to make sure the datacenter can keep its required uptime. On the networking side of things, matters get slightly more complicated. Some datacenter providers also offer you the ability to use their network uplink (also redundant), but larger customers will prefer to host their own networking equipment and negotiate their own internet uplink contracts. Since there is no generic rule for how datacenters handle this, we will dispense with a description. It is also worth noting that larger customers (banks, cloud providers, etc) usually prefer to have their own racks in a separated gated area called a \u201ccage\u201d to which they control access. The Anatomy of the Internet # In a hurry? Internet: IP ranges are advertised using BGP. Providers connect direcly or using internet exchanges. 16 global providers form the backbone of the internet (tier 1). Once the physical infrastructure is set up there is also the question of how to connect to the Internet. As mentioned before, networks can be very complicated and there is no one size fits all solution. Smaller customers will typically use the network infrastructure provided by the datacenter while larger customers will host their own network equipment. Again, generally speaking racks will be equipped with a Top-of-Rack switch to provide layer 2 (Ethernet) connectivity between servers. Several ToR may have interconnects between each other and are usually connected to one or more routers. Routers provide layer 3 (IP) routing to other customers in the same datacenter, internet exchange , or may be connected via dedicated fiber to another provider. Note If you are not familiar with computer networks we recommend giving the Geek University CCNA course a quick read . While you will not need everything, you will have to understand how IP addresses, netmasks, etc work in order to pass this course. Providers on the internet exchange data about which network they are hosting using the Border Gateway Protocol . Each provider's router announces the IP address ranges they are hosting to their peer providers, who in turn forward these announcements in an aggregated form to other providers. Providers have agreements with each other, or with an Internet Exchange, about exchanging a certain amount of traffic. These agreements may be paid if the traffic is very asymmetric or one provider is larger than the other. Alternatively providers can come to an arrangement to exchange traffic for free. Internet exchanges facilitate the exchange between many providers for a modest fee allowing cost-effective exchange of data. Depending on the exchange the rules are different. Local exchanges, for example, may only allow advertising local (in-country) addresses, while others are built for a specific purpose. Generally speaking providers can be classified into 3 categories. Tier 1 providers are the global players that are present on every continent. They form the backbone of the Internet. At the time of writing there are 16 such networks . Tier 2 are the providers who are directly connected to the tier 1 providers, while tier 3 is everyone else. Software Stack # In a hurry? Software stack: Virtualization. Operating system. Application runtime. Application. The purpose of all this is, of course, to run an application. Each server hosts an operating system which is responsible for managing the hardware. Operating systems provide a simplified API for applications to do hardware-related operations such as dealing with files or talking to the network. This part of the operating system is called the kernel. Other parts form the userland. The userland includes user applications such as a logging software. Specifically on Linux and Unix systems the userland also contains a package manager used to install other software. Modern x86 server CPUs (and some desktop CPUs) also have a number of features that help with virtualization. Virtualization lets the server administrator run multiple guest operating systems efficiently and share the server resources between them. Did you know? You can find out if an Intel CPU supports hardware virtualization by looking for the VT-x feature on the Intel ARK . Unfortunately AMD does not have an easy to use list but you can look for the AMD-V feature on AMD CPUs. Note Virtualization is different from containerization (which we will talk about later) in that with virtualization each guest operating system has its own kernel whereas containers share a kernel between them. There is one more important aspect of finally getting an application to run: the runtime environment. Except for a few rare occasions applications need a runtime environment. If the application is compiled to machine code they still need so-called shared libraries. Shared libraries are common across multiple applications and can be installed and updated independently from the application itself. This makes for a more efficient update process, but also means that the right set of libraries need to be installed for applications. If the applications are written higher level languages like Java, Javascript, PHP, etc. they need the appropriate runtime environment for that language. One notable exception to the runtime environment requirement is the programming language Go . Go compiles everything normally located in libraries into a single binary along with the application. This makes it exceptionally simple to deploy Go applications into containers. The Cloud # In a hurry? Typical cloud features: API Dynamic scaling Can be classified into IaaS, PaaS and SaaS IaaS service offerings typically include: Virtualization. Network infrastructure. Everything required to run the above. PaaS service offerings typically include a managed service ready to be consumed by a developer. SaaS service offerings typically include a managed service ready to be consumed by a non-technical end user. All of the previously discussed things were available before the \u201ccloud\u201d. You could pay a provider to give you access to a virtual machine where you could run your applications. What changed with the cloud, however, is the fact that you no longer had to write a support ticket for changed and everything became self service. The cloud age started with an infamous e-mail from Jeff Bezos to his engineers in 2002 forcing them to use APIs to exchange data between teams. The exact e-mail is no longer available but it went along these lines: 1) All teams will henceforth expose their data and functionality through service interfaces. 2) Teams must communicate with each other through these interfaces. 3) There will be no other form of interprocess communication allowed: no direct linking, no direct reads of another team\u2019s data store, no shared-memory model, no back-doors whatsoever. The only communication allowed is via service interface calls over the network. 4) It doesn\u2019t matter what technology is used. HTTP, Corba, Pubsub, custom protocols \u2014 doesn\u2019t matter. 5) All service interfaces, without exception, must be designed from the ground up to be externalizable. That is to say, the team must plan and design to be able to expose the interface to developers in the outside world. No exceptions. 6) Anyone who doesn\u2019t do this will be fired. This marked the beginning of Amazon Web Services the first and also the most successful public cloud offering. The first public release of AWS was in 2004 with SQS their message queue service, and got completely overhauled in 2006 where the Elastic Compute (EC2) and the Simple Storage Service (S3) service made its first public appearance. The APIs provided by cloud providers allow for a large amount of flexibility. If new servers are needed they can be launched within a few minutes. If there are too many servers they can be deleted. The same goes for other services: with the API (and the appropriate billing model) comes flexibility to adapt to change. The other factor that makes it easy to adapt to change is of course the fact that these services are managed. The cloud customer doesn't need to hire a team of engineers to build a database service, for example, it can be consumed without knowing how exactly the database is set up. Generally speaking, cloud services can be classified into three categories: Infrastructure as a Service (IaaS) providing virtual machines and network infrastructure, Platform as a Service (PaaS) offering services for developers to use, and Software as a Service (SaaS) offering end-user services. Note SaaS will not be discussed in this course. Infrastructure as a Service (IaaS) # The most basic of cloud service offerings is IaaS. IaaS means that the cloud provider will manage the infrastructure used by the customer. Infrastructure in this sense means the ability to manage (provision, start,stop) virtual machines. In very rare cases some providers also offer \u201cbare metal\u201d machines in this fashion. However, most bare metal providers do not offer a true IaaS as machines cannot be ordered using an API, have an up-front fee and are billed on a monthly basis. IaaS also includes the network connectivity to the Internet. Almost all IaaS providers also offer a built-in firewall, virtual private networks (VPC) that can be used to connect virtual machines together without sending the traffic over the Internet, and other network services. Note that network services can differ greatly. For example, some providers implement private networks on a regional basis while other providers offer private networks that can be used to connect virtual machines that are located in different regions. Managed Services (PaaS) # In a hurry? Managed services: The provider is typically responsible for provisioning, backups, monitoring and restoring the service if needed. Low entry cost. Little in-house know-how required. Vendor lock-in for non-standard services. If problems arise they can be hard to debug. Apart from offering virtual machines and network infrastructure as a service many cloud providers also offer additional services that are typically used by developers such as managed databases. These services are managed in the sense that the developer does not need to run the operating system and the database software itself. However, the developer has to configure the database such that it works according to the needs of the application. The provider takes over duties like installing the service, making backups, monitoring, and restoring the service in case of an outage. Did you know? There are purely PaaS providers that do not offer IaaS, only a developer-friendly platform to run software on. Your run of the mill average PHP web hosting provider does qualify if you can order the service using an API. One notable example that rose to prominence is Heroku . The pricing of these managed services varies greatly but they usually follow the cloud model. Most cloud providers offer at least a low cost or even free entry version that has a small markup on top of the IaaS costs. The massive benefit of using these managed services is, of course, that you do not need to have in-house knowledge about how to operate them. You don't need an in-house database operator, you \u201cjust\u201d need to know how to set up the database in the cloud. This lets your company focus on the core business they are trying to build and outsource the know-how required to build these services on top of the IaaS layer. As you might imagine managed servies also have downsides. Most importantly they present a clear vendor lock-in. This means that if you want to move to a different cloud provider you will have a hard time doing so if you are using one of the more specialized services. In other words the level of standardization across providers matters. It is also worth mentioning that managed services tend to work well for a large number of customers but a few number of customers can run into hard to debug problems. This debugging difficulty arises out of the inherent opacity of the services: you, the customer, don't see what's happening on the IaaS layer. If a database, for example, fills the available bandwidth may not be notified and are left guessing why your database misbehaves. Business Models # In a hurry? Billing models: IaaS is typically priced per-second based on the instance size. PaaS can be priced similar to IaaS but also per-request or data volume. Data volume is typically priced based on usage. Some providers charge for data volume even for internal traffic. The flexibility of cloud providers comes from their usage-based pricing. This can vary depending on the type of service used. For example, virtual machines (IaaS) is typically priced on a per-second basis. When you start a virtual machine for only 5 minutes you will only pay for 5 minutes of runtime. This lets you optimize the usage costs of the cloud if you use automation to start and stop machines or services on demand. Typically the cost savings are realized in these scenarios: On-off usage # This usage type is typical for batch processing. Machines are only started when there is a workload (e.g. video conversion, machine learning training job, etc.) Growth usage # Projects that see a growth curve often opt to use a cloud provider as well since buying hardware in larger quantities typically takes 2-4 months. Sudden spike usage # Cloud providers can also be useful if a service encounters a sudden load spike. This is typically the case for webshops around Black Friday and other sales events. Periodic spike usage # Almost every service has usage spikes depending on the time of day. This can be used to scale the service up and down. Per-request billing # IaaS services are typically priced based on an allocated amount of resources determined at the start of the virtual machines. Some PaaS services also use this billing model. (Typically Databases as a Service.) Other PaaS services often opt for a per-request or a data volume based billing approach. Cost planning with the cloud # Cost planning is an important part of the job of a cloud architect. Depending on the billing model the cloud provider adopts this can be fairly simple to almost impossible. As a rule of thumb the billing model of larger cloud providers (AWS, Azure, Google Cloud) is more complex than smaller cloud providers (DigitalOcean, Exoscale, Upcloud, etc). It is worth noting that data transfer is typically charged based on volume. Some cloud providers even charge for internal traffic between availability zones. Cost-comparison with on premises systems # One of the most important cases for cost analysis will be the comparison with on premises architecture. It is quite common to create a cost comparison where the investment required for a hardware purchase is compared with the cloud cost over 3 or 5 years. These comparisons can be quite misleading because they often don't contain any cost attribution for the required work and they also do not use the advantages of the cloud in terms of scaling. Without these factors a hardware purchase will almost always be cheaper when calculated over 5 years and be roughly equal when compared over 3 years. Private vs. Public Cloud # In a hurry? Private cloud: Hosted on-premises or in the public cloud using only private connections. Large cloud providers offer their services \u201cin a box\u201d to host yourself. Most cloud applications will reside on a public cloud and be accessible from the Internet. However, for some usecases access over the public Internet is not desirable or even strictly forbidden by laws or regulations. In order cases companies may decide that it is their policy that certain systems must never be connected to the public Internet, or only connect via a self-hosted gateway. In these cases a private cloud is desirable to minimize the risk of cross-contamination or data exposure due to other tenants being on the same infrastructure. Such cross-contamination is not uncommon, for example in recent years there have been a litany of CPU bugs such as Meltdown and Spectre . Public cloud providers have extended their offers to address these concerns. Their service offerings now include dedicated hypervisors to mitigate CPU bugs, the ability to connect the cloud bypassing the Internet , or accessing the cloud API's from a private network . Some cloud providers even went as far offering a self-hosted setup where the public cloud offering can be brought on-premises. These features, especially the connectivity-related features, also allow for the creation of a hybrid cloud where a traditional infrastructure can be connected to the cloud. This gives a company the ability to leverage the flexibility of the cloud but also keep static / legacy systems for financial or engineering reasons. Automation # In a hurry? Automation: Documents how a cloud is set up. Gives a reproducible environment. Allows for spinning up multiple copies of the same environment. Not all tools are equal. Some tools allow for manual changes after running them (e.g. Ansible), others don't (e.g. Terraform). As you can see from the previous sections cloud computing doesn't necessarily make it simpler to deploy an application. In this regard setting up a server and not documenting it is the same as setting up a cloud and not documenting it. In the end in both cases modifications will be hard to carry out later since details of the implementation are lost. It will also be hard to create a near-identical copy of the environment for development, testing, etc. purposes. This is partially due to the lack of documentation, and partially because of the manual work involved. In the past this problem was addressed by cloning virtual machines which was an approach with limited success as customizations were hard to make. The rise of API's brought a much welcome change: automation tools such as Puppet, Ansible and Terraform not only automate the installation of a certain software but also document how the setup works. When engineers first go into automation they tend to reserve a part of the work to be done manually. For example they might use Ansible to create virtual machines and install some basic tools and install the rest of the software stack by hand. This approach is workable where the software stack cannot be automated but should be avoided for software where this is not the case as the lack of automation usually also means a lack of documentation as described above. Automation tools are also not equally suited for each task. Terraform, for example, expects full control of the infrastructure that is created by it. Manual installation steps afterwards are not supported. This approach gives Terraform the advantage that it can also remove the infrastructure it creates. Removing the infrastructure is paramount when there are multiple temporary environments deployed such as a dev or testing environment. Ansible, on the other hand, allows for manual changes but does not automatically implement a tear-down procedure for the environment that has been created. This makes Ansible environments, and Ansible code harder to test and maintain but more suited for environments where traditional IT is still a concern. Regulation # In a hurry? GDPR: Applies to all companies, world-wide, that handle personal data of EU citizens. Companies must keep track of why and how data is handled. Data subjects have wide ranging, but not unlimited rights to request information, correction and deletion of data. Data breaches have to be reported and may carry a fine. The right of deletion means that backups have to be set up in such a way that data can be deleted. CLOUD Act: US authorities can access data stored by US companies in Europe. DMCA: Copyright infringements can be solved by sending a DMCA takedown notice to the provider. Providers have to restore the content if the uploader sends a counter-notification. CDA Section 230: Shields providers from liability if their systems host illegal content which they don't know about. Privacy Shield and SCC: Privacy Shield was recently abolished and instead cloud providers must now add Standard Contract Clauses to their Terms of Service. The SCC favored by most cloud providers puts the legal liability for any data braches due to US law enforcement requests on the cloud customer (you). General Data Protection Regulation (G.D.P.R., EU) # The GDPR (or DSGVO in German-speaking countries) is the general overhaul of privacy protections in the EU. The GDPR replaces much of the previously country-specific privacy protections present in the EU. Jurisdiction # The GDPR applies to all companies that deal with the data of EU citizens around the globe. This is made possible by trade agreements previously already in place. All companies that handle the data of EU citizens even if the companies are not located in the EU. Structure # Data subject: the person whose data is being handled. Personal identifiable data: (PI) data that makes it possible to uniquely identify a data subject. PI can also be created when previously non-PI data is combined to build a profile. Data controller: The company that has a relationship with the data subject and is given the data for a certain task. Data processor: A company that processes data on behalf of the data controller. The data processor must have a data processing agreement (DPA) with the data controller. IaaS and PaaS cloud providers are data processors. Purposes of data processing # One new limitation the GDPR brings to privacy regulation is the fact that there are fundamental limits to data processing. You, the data controller, cannot simply collect data for one purpose and then use that same data for another purpose. The purposes to which data is collected have to be clearly defined and in several cases the data subject has to provide their explicit consent. (In other words it is not enough to add a text to the signup form that says that they agree to everything all at once.) Legal grounds to data processing are detailed in Article 6 of the GDPR . These are: If the data subject has given their explicit consent to process their data for a specific purpose. If the processing is necessary to perform a contract with the data subject. In other words you do not need additional consent if you are processing data in order to fulfill a service to the data subject. To perform a legal obligation . For example, you have to keep an archive of your invoices to show in case of a tax audit. To protect the vial interests of the data subject or another natural person . To perform a task which is in the public interest , or if an official authority has been vested in the data controller. For the purposes of a legitimate interest of the data controller (with exceptions). This might seem like a catch-all but courts have defined legitimate interests very narrowly. The data controller must show that the legitimate interest exists and cannot be achieved in any other way than with the data processing in question. One good example for the legitimate interests clause would be a webshop that is collecting data about their visitors in order to spot fraudulent orders. Data subjects' rights # Chapter 3 of the GDPR deals with the rights of the data subject. These are: The right to be informed. This right lets the data subject request several pieces of information: The purposes of processing. The categories of personal data concerned. Who received their data, in particular recipients in third countries or international organisations. How long the data will be stored. The right to request modification, deletion or restricting the processing of the personal data in question. The right to log a complaint. The source of the personal data if not provided by the data subject themselves. If and how automated decision-making, profiling is taking place. The right to fix incorrect data. The right of deletion. \u201cThe right to be forgotten.\u201d This right puts several architectural limites on cloud systems as, for example, backups must be built in such a way that deletion requests are repeated after a restore. Note that this right is not without limits, legal obligations, for example, override it. The right to restrict processing. If a deletion cannot be requested the data subject can request that their data should only be processed to the purposes that are strictly required. The right to data portability. The data subject has to be provided a copy of their data in a machine-readable form. The right to object automated individual decision-making and profiling. Data breaches # Chapter IV Section 2 is probably the first legislation around the world that explicitly requires security of data processing from companies that handle personal data. Article 33 of this chapter specifically requires that data breaches must be disclosed to the supervisory authorities. Supervisory authorities in turn have the right to impose fines up to 4% or 20.000.000 \u20ac of the global revenue of a company. This means that companies can no longer sweep data breaches under the rug and must spend resources to secure their data processing. In the scope of the cloud this means that our cloud environment has to be set up in a secure way to avoid data breaches. Clarifying Lawful Overseas Use of Data Act (C.L.O.U.D., 2018, USA) # The CLOUD Act, or House Rule 4943 is the latest addition to the US legislation pertaining to cloud providers. This act says that a cloud provider must hand over data to US authorities if requested even if that data is stored in a different country. This act has been widely criticized and is, according to several legal scholars, in contradiction of the GDPR. The large US cloud providers have opened up subsidiaries in the EU in order to try and shield their european customers from this act and a few purely EU cloud providers have also capitalized on this. It remains to be seen how effective this move is. Digital Millennium Copyright Act (D.M.C.A., 1998, USA) # The Digital Millenium Copyright Act clarifies how copyright works in the USA. Since the USA is part of the WIPO copyright treaty and a significant amount of providers are based in the USA nowadays all countries align themselves with the DMCA when it comes to dealing with online copyright infringement. Title II of the DMCA creates a safe harbor for online service providers against copyright infringement committed by their users. However, they have to remove infringing content as soon as they are properly notified of it via a DMCA takedown notice. The author of a DMCA takedown notice must swear by the penalty of perjury that they are, or are acting on behalf of the copyright owner. (If they were to make this pledge in bad faith they could end up in prison.) If the DMCA takedown notice has been sent erroneously the original uploader is free to send a counter-notification, also swearing under the penalty of perjury. In this case the provider notifies the original sender and restores the content. The original sender then has to take the uploader to court to pursue the matter further. Communications Decency Act, Section 230 (C.D.A., 1996, USA) # This section of of the CDA is very short: No provider or user of an interactive computer service shall be treated as the publisher or speaker of any information provided by another information content provider. To someone not well versed in US legal lingo this may be sound like gibberish but it is, in fact, one of the most important pieces of legislation pertaining to operating platforms in the cloud. In US legal history the speaker or publisher of certain information is responsible for the information being provided. Before the CDA any provider hosting illegal content would be responsible for said content. The CDA changed that by shielding providers from liability. This included web hosting providers as well as newspapers that had a content section. The CDA is not limitless, providers still have to remove infringing content if notified. They may also employ moderation proactively. The fall of Privacy Shield and Standard Contract Clauses (2020, EU-US) # The Privacy Shield agreement (2016) was the successor to the failed International Safe Harbor Privacy Principles framework and is intend to protect the privacy of EU citizens when using US services or their data is transferred to the USA. The Privacy Shield has been enhanced in 2017 by the EU\u2013US Umbrella Agreement which fixed many of the issues with the Privacy Shield. Unfortunately for cloud users, Privacy Shield has been invalidated by the CJEU . This decision means that you, as a European cloud user, can no longer automatically use a US-governed cloud provider without accepting liability. The first SCC is Decision 2001/497/EC which states that both parties (you as the cloud user, and the cloud provider) are both jointly and severally liable for any data breaches. The second SCC is Decision 2004/915/EC is more business friendly amd merely makes sure that the that both the European party and the non-European party upheld their obligation to handle data with due care and implement protection measures. Shared liability would only apply if the terms of the SCC were breached. While this is a step forward, it is worth noting that this puts the responsibility on the cloud customer if the cloud provider breaches the terms by, for example, handing over data to US authorities covertly. The third SCC is Decision 2010/87/EU and was adopted by Google and AWS , for example. It creates a safety net for the cloud provider by only requiring them to disclose requests by law enforcement if that would not put criminal liability on them. It also puts any liability for damages on the cloud user unless they, for example, went bankrupt. In that case the cloud provider is only responsible for their own operations, not those of the cloud user. In order words, you the cloud user are responsible for any breaches of data due to US law enforcement requests .","title":"1. Introduction to the Cloud"},{"location":"lectures/1-cloud-intro/#what_is_a_server","text":"In a hurry? Servers: Nowadays either x86 or ARM architecture. Redundant, hot-swap hardware (power supply, fans, etc). Flat build profile for rack mounts. Out-Of-Bounds management interface for monitoring and remote management. Power consumption is a concern. Buying servers can take a long time and present an up-front investment. In older times, servers were completely different from the machines we used for regular work. Not just in weight and form factor, but in architecture. The landscape would stretch from SPARC and Power architectures to the x86 architecture we use in our PCs. Over time, however, the x86 architecture took over to the point where a server today, from an architectural standpoint, is exactly the same as the machine you are using right now. This means that you can copy the machine you are using onto a server and chances are it will run without any modification. The only notable exception is the rise of the ARM architecture which is popular in phones and tables and is known for its low power consumption. In recent years there has been a small but noticeable trend to run ARM in a datacenter. At home it may not matter if your computer uses 200 or 300 watts of power. In a datacenter, at the scale of hundreds, thousands or tens of thousands of servers, saving even a few percent of power will translate to huge cost savings. The difference in build is, however, quite apparent. While some servers, mainly built for office use, have the standard \u201ctower\u201d build, most servers have a flat profile designed to be mounted in racks as displayed on the picture. Since most servers are not high enough to take full size expansion cards (graphics cards, network cards, etc), servers may contain a separate removable component for these usually called a riser. An HP Proliant G5 server pulled out of its rack. Source: Wikipedia Server racks are standardized closets that have mounting screws for rails that allow pulling servers out even mid operation and replace components while the server is running. Servers also come with a high level of redundancy. While you may have a single power supply in your home computer, servers typically have two that are able to take power from different power inputs. This makes sure that the server keeps running even if one of the two power supplies fail, or if one of the two power inputs goes down. Also in contrast to your home setup these servers contain an Out-Of-Bounds Management interface that allows remote management of servers even when they are turned off. The hardware components built into the server report their health status to this OOB management interface which allows for the simultaneous monitoring of thousands of machines. Note This is a fairly generic description of servers. Different vendors may chose to leave out certain features of their more \u201cbudget\u201d line of servers, or call certain components differently. HP, for example, calls their OOBM \u201cIntegrated Lights Out\u201d, Dell \u201cDRAC - Dell Remote Access Control\u201d, etc. When it comes to purchasing servers larger companies tend to go with the same components for a longer period of time and they also buy support from the vendor. This sometimes includes hardware replacement done entirely by the vendor in the datacenter without the need for the customer to have staff on site. However, purchasing a specific set of components or ordering larger quantities of servers presents a logistics challenge and can sometimes take up to 3-4 months. Buying hardware is also an up-front investment which is hard to justify when demands change rapidly. What components are redundant in a server? Power supply CPU RAM Fan OOBM What is the purpose of an OOBM? Remotely manage a server Receive hardware malfunction alerts","title":"What is a Server?"},{"location":"lectures/1-cloud-intro/#the_anatomy_of_a_datacenter","text":"In a hurry? Datacenter components: Racks to house servers. Larger customers have cages for their racks. Cabling under the floor. Redundant cooling, fire suppression systems and power supply. Some datacenters provide internet connectivity. Eco friendliness is becoming a factor. Since the cloud is just somebody else's computer, that computer needs to be hosted somewhere. Servers are almost exclusively hosted in datacenters. Let's take a look at what is involved in running a datacenter. First of all, as mentioned above, most servers are going to be rack-mounted so you need a bunch of racks. These racks are installed in rows, often with a fake floor to allow for cabling to go under the floor. A datacenter with racks. Source: Wikipedia Since servers produce a lot of heat, a datacenter also requires cooling. There are a variety of ways to solve cooling, some are more \u201cgreen\u201d than others. Some datacenters, for example, opt to install a \u201ccold aisles\u201d where the cold air is pumped between two rack rows and is pushed through the racks to cool the servers. Apart from cooling, datacenters also require automated fire suppression systems simply because of the amount of electricity going through. Datacenters usually go with a non-destructive fire suppression system such as lowering the oxygen content of the air enough to stop the fire. All critical systems in a datacenter (power, cooling, fire suppression systems) are usually built in a redundant fashion because the loss of either of those systems will potentially mean a complete shutdown for the datacenter. Datacenter operators usually have further contingency plans in place, too, such as a UPS (battery) system, diesel generator, fuel truck on standby, hotline to the fire department, etc. to make sure the datacenter can keep its required uptime. On the networking side of things, matters get slightly more complicated. Some datacenter providers also offer you the ability to use their network uplink (also redundant), but larger customers will prefer to host their own networking equipment and negotiate their own internet uplink contracts. Since there is no generic rule for how datacenters handle this, we will dispense with a description. It is also worth noting that larger customers (banks, cloud providers, etc) usually prefer to have their own racks in a separated gated area called a \u201ccage\u201d to which they control access.","title":"The Anatomy of a Datacenter"},{"location":"lectures/1-cloud-intro/#the_anatomy_of_the_internet","text":"In a hurry? Internet: IP ranges are advertised using BGP. Providers connect direcly or using internet exchanges. 16 global providers form the backbone of the internet (tier 1). Once the physical infrastructure is set up there is also the question of how to connect to the Internet. As mentioned before, networks can be very complicated and there is no one size fits all solution. Smaller customers will typically use the network infrastructure provided by the datacenter while larger customers will host their own network equipment. Again, generally speaking racks will be equipped with a Top-of-Rack switch to provide layer 2 (Ethernet) connectivity between servers. Several ToR may have interconnects between each other and are usually connected to one or more routers. Routers provide layer 3 (IP) routing to other customers in the same datacenter, internet exchange , or may be connected via dedicated fiber to another provider. Note If you are not familiar with computer networks we recommend giving the Geek University CCNA course a quick read . While you will not need everything, you will have to understand how IP addresses, netmasks, etc work in order to pass this course. Providers on the internet exchange data about which network they are hosting using the Border Gateway Protocol . Each provider's router announces the IP address ranges they are hosting to their peer providers, who in turn forward these announcements in an aggregated form to other providers. Providers have agreements with each other, or with an Internet Exchange, about exchanging a certain amount of traffic. These agreements may be paid if the traffic is very asymmetric or one provider is larger than the other. Alternatively providers can come to an arrangement to exchange traffic for free. Internet exchanges facilitate the exchange between many providers for a modest fee allowing cost-effective exchange of data. Depending on the exchange the rules are different. Local exchanges, for example, may only allow advertising local (in-country) addresses, while others are built for a specific purpose. Generally speaking providers can be classified into 3 categories. Tier 1 providers are the global players that are present on every continent. They form the backbone of the Internet. At the time of writing there are 16 such networks . Tier 2 are the providers who are directly connected to the tier 1 providers, while tier 3 is everyone else.","title":"The Anatomy of the Internet"},{"location":"lectures/1-cloud-intro/#software_stack","text":"In a hurry? Software stack: Virtualization. Operating system. Application runtime. Application. The purpose of all this is, of course, to run an application. Each server hosts an operating system which is responsible for managing the hardware. Operating systems provide a simplified API for applications to do hardware-related operations such as dealing with files or talking to the network. This part of the operating system is called the kernel. Other parts form the userland. The userland includes user applications such as a logging software. Specifically on Linux and Unix systems the userland also contains a package manager used to install other software. Modern x86 server CPUs (and some desktop CPUs) also have a number of features that help with virtualization. Virtualization lets the server administrator run multiple guest operating systems efficiently and share the server resources between them. Did you know? You can find out if an Intel CPU supports hardware virtualization by looking for the VT-x feature on the Intel ARK . Unfortunately AMD does not have an easy to use list but you can look for the AMD-V feature on AMD CPUs. Note Virtualization is different from containerization (which we will talk about later) in that with virtualization each guest operating system has its own kernel whereas containers share a kernel between them. There is one more important aspect of finally getting an application to run: the runtime environment. Except for a few rare occasions applications need a runtime environment. If the application is compiled to machine code they still need so-called shared libraries. Shared libraries are common across multiple applications and can be installed and updated independently from the application itself. This makes for a more efficient update process, but also means that the right set of libraries need to be installed for applications. If the applications are written higher level languages like Java, Javascript, PHP, etc. they need the appropriate runtime environment for that language. One notable exception to the runtime environment requirement is the programming language Go . Go compiles everything normally located in libraries into a single binary along with the application. This makes it exceptionally simple to deploy Go applications into containers.","title":"Software Stack"},{"location":"lectures/1-cloud-intro/#the_cloud","text":"In a hurry? Typical cloud features: API Dynamic scaling Can be classified into IaaS, PaaS and SaaS IaaS service offerings typically include: Virtualization. Network infrastructure. Everything required to run the above. PaaS service offerings typically include a managed service ready to be consumed by a developer. SaaS service offerings typically include a managed service ready to be consumed by a non-technical end user. All of the previously discussed things were available before the \u201ccloud\u201d. You could pay a provider to give you access to a virtual machine where you could run your applications. What changed with the cloud, however, is the fact that you no longer had to write a support ticket for changed and everything became self service. The cloud age started with an infamous e-mail from Jeff Bezos to his engineers in 2002 forcing them to use APIs to exchange data between teams. The exact e-mail is no longer available but it went along these lines: 1) All teams will henceforth expose their data and functionality through service interfaces. 2) Teams must communicate with each other through these interfaces. 3) There will be no other form of interprocess communication allowed: no direct linking, no direct reads of another team\u2019s data store, no shared-memory model, no back-doors whatsoever. The only communication allowed is via service interface calls over the network. 4) It doesn\u2019t matter what technology is used. HTTP, Corba, Pubsub, custom protocols \u2014 doesn\u2019t matter. 5) All service interfaces, without exception, must be designed from the ground up to be externalizable. That is to say, the team must plan and design to be able to expose the interface to developers in the outside world. No exceptions. 6) Anyone who doesn\u2019t do this will be fired. This marked the beginning of Amazon Web Services the first and also the most successful public cloud offering. The first public release of AWS was in 2004 with SQS their message queue service, and got completely overhauled in 2006 where the Elastic Compute (EC2) and the Simple Storage Service (S3) service made its first public appearance. The APIs provided by cloud providers allow for a large amount of flexibility. If new servers are needed they can be launched within a few minutes. If there are too many servers they can be deleted. The same goes for other services: with the API (and the appropriate billing model) comes flexibility to adapt to change. The other factor that makes it easy to adapt to change is of course the fact that these services are managed. The cloud customer doesn't need to hire a team of engineers to build a database service, for example, it can be consumed without knowing how exactly the database is set up. Generally speaking, cloud services can be classified into three categories: Infrastructure as a Service (IaaS) providing virtual machines and network infrastructure, Platform as a Service (PaaS) offering services for developers to use, and Software as a Service (SaaS) offering end-user services. Note SaaS will not be discussed in this course.","title":"The Cloud"},{"location":"lectures/1-cloud-intro/#infrastructure_as_a_service_iaas","text":"The most basic of cloud service offerings is IaaS. IaaS means that the cloud provider will manage the infrastructure used by the customer. Infrastructure in this sense means the ability to manage (provision, start,stop) virtual machines. In very rare cases some providers also offer \u201cbare metal\u201d machines in this fashion. However, most bare metal providers do not offer a true IaaS as machines cannot be ordered using an API, have an up-front fee and are billed on a monthly basis. IaaS also includes the network connectivity to the Internet. Almost all IaaS providers also offer a built-in firewall, virtual private networks (VPC) that can be used to connect virtual machines together without sending the traffic over the Internet, and other network services. Note that network services can differ greatly. For example, some providers implement private networks on a regional basis while other providers offer private networks that can be used to connect virtual machines that are located in different regions.","title":"Infrastructure as a Service (IaaS)"},{"location":"lectures/1-cloud-intro/#managed_services_paas","text":"In a hurry? Managed services: The provider is typically responsible for provisioning, backups, monitoring and restoring the service if needed. Low entry cost. Little in-house know-how required. Vendor lock-in for non-standard services. If problems arise they can be hard to debug. Apart from offering virtual machines and network infrastructure as a service many cloud providers also offer additional services that are typically used by developers such as managed databases. These services are managed in the sense that the developer does not need to run the operating system and the database software itself. However, the developer has to configure the database such that it works according to the needs of the application. The provider takes over duties like installing the service, making backups, monitoring, and restoring the service in case of an outage. Did you know? There are purely PaaS providers that do not offer IaaS, only a developer-friendly platform to run software on. Your run of the mill average PHP web hosting provider does qualify if you can order the service using an API. One notable example that rose to prominence is Heroku . The pricing of these managed services varies greatly but they usually follow the cloud model. Most cloud providers offer at least a low cost or even free entry version that has a small markup on top of the IaaS costs. The massive benefit of using these managed services is, of course, that you do not need to have in-house knowledge about how to operate them. You don't need an in-house database operator, you \u201cjust\u201d need to know how to set up the database in the cloud. This lets your company focus on the core business they are trying to build and outsource the know-how required to build these services on top of the IaaS layer. As you might imagine managed servies also have downsides. Most importantly they present a clear vendor lock-in. This means that if you want to move to a different cloud provider you will have a hard time doing so if you are using one of the more specialized services. In other words the level of standardization across providers matters. It is also worth mentioning that managed services tend to work well for a large number of customers but a few number of customers can run into hard to debug problems. This debugging difficulty arises out of the inherent opacity of the services: you, the customer, don't see what's happening on the IaaS layer. If a database, for example, fills the available bandwidth may not be notified and are left guessing why your database misbehaves.","title":"Managed Services (PaaS)"},{"location":"lectures/1-cloud-intro/#business_models","text":"In a hurry? Billing models: IaaS is typically priced per-second based on the instance size. PaaS can be priced similar to IaaS but also per-request or data volume. Data volume is typically priced based on usage. Some providers charge for data volume even for internal traffic. The flexibility of cloud providers comes from their usage-based pricing. This can vary depending on the type of service used. For example, virtual machines (IaaS) is typically priced on a per-second basis. When you start a virtual machine for only 5 minutes you will only pay for 5 minutes of runtime. This lets you optimize the usage costs of the cloud if you use automation to start and stop machines or services on demand. Typically the cost savings are realized in these scenarios:","title":"Business Models"},{"location":"lectures/1-cloud-intro/#on-off_usage","text":"This usage type is typical for batch processing. Machines are only started when there is a workload (e.g. video conversion, machine learning training job, etc.)","title":"On-off usage"},{"location":"lectures/1-cloud-intro/#growth_usage","text":"Projects that see a growth curve often opt to use a cloud provider as well since buying hardware in larger quantities typically takes 2-4 months.","title":"Growth usage"},{"location":"lectures/1-cloud-intro/#sudden_spike_usage","text":"Cloud providers can also be useful if a service encounters a sudden load spike. This is typically the case for webshops around Black Friday and other sales events.","title":"Sudden spike usage"},{"location":"lectures/1-cloud-intro/#periodic_spike_usage","text":"Almost every service has usage spikes depending on the time of day. This can be used to scale the service up and down.","title":"Periodic spike usage"},{"location":"lectures/1-cloud-intro/#per-request_billing","text":"IaaS services are typically priced based on an allocated amount of resources determined at the start of the virtual machines. Some PaaS services also use this billing model. (Typically Databases as a Service.) Other PaaS services often opt for a per-request or a data volume based billing approach.","title":"Per-request billing"},{"location":"lectures/1-cloud-intro/#cost_planning_with_the_cloud","text":"Cost planning is an important part of the job of a cloud architect. Depending on the billing model the cloud provider adopts this can be fairly simple to almost impossible. As a rule of thumb the billing model of larger cloud providers (AWS, Azure, Google Cloud) is more complex than smaller cloud providers (DigitalOcean, Exoscale, Upcloud, etc). It is worth noting that data transfer is typically charged based on volume. Some cloud providers even charge for internal traffic between availability zones.","title":"Cost planning with the cloud"},{"location":"lectures/1-cloud-intro/#cost-comparison_with_on_premises_systems","text":"One of the most important cases for cost analysis will be the comparison with on premises architecture. It is quite common to create a cost comparison where the investment required for a hardware purchase is compared with the cloud cost over 3 or 5 years. These comparisons can be quite misleading because they often don't contain any cost attribution for the required work and they also do not use the advantages of the cloud in terms of scaling. Without these factors a hardware purchase will almost always be cheaper when calculated over 5 years and be roughly equal when compared over 3 years.","title":"Cost-comparison with on premises systems"},{"location":"lectures/1-cloud-intro/#private_vs_public_cloud","text":"In a hurry? Private cloud: Hosted on-premises or in the public cloud using only private connections. Large cloud providers offer their services \u201cin a box\u201d to host yourself. Most cloud applications will reside on a public cloud and be accessible from the Internet. However, for some usecases access over the public Internet is not desirable or even strictly forbidden by laws or regulations. In order cases companies may decide that it is their policy that certain systems must never be connected to the public Internet, or only connect via a self-hosted gateway. In these cases a private cloud is desirable to minimize the risk of cross-contamination or data exposure due to other tenants being on the same infrastructure. Such cross-contamination is not uncommon, for example in recent years there have been a litany of CPU bugs such as Meltdown and Spectre . Public cloud providers have extended their offers to address these concerns. Their service offerings now include dedicated hypervisors to mitigate CPU bugs, the ability to connect the cloud bypassing the Internet , or accessing the cloud API's from a private network . Some cloud providers even went as far offering a self-hosted setup where the public cloud offering can be brought on-premises. These features, especially the connectivity-related features, also allow for the creation of a hybrid cloud where a traditional infrastructure can be connected to the cloud. This gives a company the ability to leverage the flexibility of the cloud but also keep static / legacy systems for financial or engineering reasons.","title":"Private vs. Public Cloud"},{"location":"lectures/1-cloud-intro/#automation","text":"In a hurry? Automation: Documents how a cloud is set up. Gives a reproducible environment. Allows for spinning up multiple copies of the same environment. Not all tools are equal. Some tools allow for manual changes after running them (e.g. Ansible), others don't (e.g. Terraform). As you can see from the previous sections cloud computing doesn't necessarily make it simpler to deploy an application. In this regard setting up a server and not documenting it is the same as setting up a cloud and not documenting it. In the end in both cases modifications will be hard to carry out later since details of the implementation are lost. It will also be hard to create a near-identical copy of the environment for development, testing, etc. purposes. This is partially due to the lack of documentation, and partially because of the manual work involved. In the past this problem was addressed by cloning virtual machines which was an approach with limited success as customizations were hard to make. The rise of API's brought a much welcome change: automation tools such as Puppet, Ansible and Terraform not only automate the installation of a certain software but also document how the setup works. When engineers first go into automation they tend to reserve a part of the work to be done manually. For example they might use Ansible to create virtual machines and install some basic tools and install the rest of the software stack by hand. This approach is workable where the software stack cannot be automated but should be avoided for software where this is not the case as the lack of automation usually also means a lack of documentation as described above. Automation tools are also not equally suited for each task. Terraform, for example, expects full control of the infrastructure that is created by it. Manual installation steps afterwards are not supported. This approach gives Terraform the advantage that it can also remove the infrastructure it creates. Removing the infrastructure is paramount when there are multiple temporary environments deployed such as a dev or testing environment. Ansible, on the other hand, allows for manual changes but does not automatically implement a tear-down procedure for the environment that has been created. This makes Ansible environments, and Ansible code harder to test and maintain but more suited for environments where traditional IT is still a concern.","title":"Automation"},{"location":"lectures/1-cloud-intro/#regulation","text":"In a hurry? GDPR: Applies to all companies, world-wide, that handle personal data of EU citizens. Companies must keep track of why and how data is handled. Data subjects have wide ranging, but not unlimited rights to request information, correction and deletion of data. Data breaches have to be reported and may carry a fine. The right of deletion means that backups have to be set up in such a way that data can be deleted. CLOUD Act: US authorities can access data stored by US companies in Europe. DMCA: Copyright infringements can be solved by sending a DMCA takedown notice to the provider. Providers have to restore the content if the uploader sends a counter-notification. CDA Section 230: Shields providers from liability if their systems host illegal content which they don't know about. Privacy Shield and SCC: Privacy Shield was recently abolished and instead cloud providers must now add Standard Contract Clauses to their Terms of Service. The SCC favored by most cloud providers puts the legal liability for any data braches due to US law enforcement requests on the cloud customer (you).","title":"Regulation"},{"location":"lectures/1-cloud-intro/#general_data_protection_regulation_gdpr_eu","text":"The GDPR (or DSGVO in German-speaking countries) is the general overhaul of privacy protections in the EU. The GDPR replaces much of the previously country-specific privacy protections present in the EU.","title":"General Data Protection Regulation (G.D.P.R., EU)"},{"location":"lectures/1-cloud-intro/#jurisdiction","text":"The GDPR applies to all companies that deal with the data of EU citizens around the globe. This is made possible by trade agreements previously already in place. All companies that handle the data of EU citizens even if the companies are not located in the EU.","title":"Jurisdiction"},{"location":"lectures/1-cloud-intro/#structure","text":"Data subject: the person whose data is being handled. Personal identifiable data: (PI) data that makes it possible to uniquely identify a data subject. PI can also be created when previously non-PI data is combined to build a profile. Data controller: The company that has a relationship with the data subject and is given the data for a certain task. Data processor: A company that processes data on behalf of the data controller. The data processor must have a data processing agreement (DPA) with the data controller. IaaS and PaaS cloud providers are data processors.","title":"Structure"},{"location":"lectures/1-cloud-intro/#purposes_of_data_processing","text":"One new limitation the GDPR brings to privacy regulation is the fact that there are fundamental limits to data processing. You, the data controller, cannot simply collect data for one purpose and then use that same data for another purpose. The purposes to which data is collected have to be clearly defined and in several cases the data subject has to provide their explicit consent. (In other words it is not enough to add a text to the signup form that says that they agree to everything all at once.) Legal grounds to data processing are detailed in Article 6 of the GDPR . These are: If the data subject has given their explicit consent to process their data for a specific purpose. If the processing is necessary to perform a contract with the data subject. In other words you do not need additional consent if you are processing data in order to fulfill a service to the data subject. To perform a legal obligation . For example, you have to keep an archive of your invoices to show in case of a tax audit. To protect the vial interests of the data subject or another natural person . To perform a task which is in the public interest , or if an official authority has been vested in the data controller. For the purposes of a legitimate interest of the data controller (with exceptions). This might seem like a catch-all but courts have defined legitimate interests very narrowly. The data controller must show that the legitimate interest exists and cannot be achieved in any other way than with the data processing in question. One good example for the legitimate interests clause would be a webshop that is collecting data about their visitors in order to spot fraudulent orders.","title":"Purposes of data processing"},{"location":"lectures/1-cloud-intro/#data_subjects_rights","text":"Chapter 3 of the GDPR deals with the rights of the data subject. These are: The right to be informed. This right lets the data subject request several pieces of information: The purposes of processing. The categories of personal data concerned. Who received their data, in particular recipients in third countries or international organisations. How long the data will be stored. The right to request modification, deletion or restricting the processing of the personal data in question. The right to log a complaint. The source of the personal data if not provided by the data subject themselves. If and how automated decision-making, profiling is taking place. The right to fix incorrect data. The right of deletion. \u201cThe right to be forgotten.\u201d This right puts several architectural limites on cloud systems as, for example, backups must be built in such a way that deletion requests are repeated after a restore. Note that this right is not without limits, legal obligations, for example, override it. The right to restrict processing. If a deletion cannot be requested the data subject can request that their data should only be processed to the purposes that are strictly required. The right to data portability. The data subject has to be provided a copy of their data in a machine-readable form. The right to object automated individual decision-making and profiling.","title":"Data subjects' rights"},{"location":"lectures/1-cloud-intro/#data_breaches","text":"Chapter IV Section 2 is probably the first legislation around the world that explicitly requires security of data processing from companies that handle personal data. Article 33 of this chapter specifically requires that data breaches must be disclosed to the supervisory authorities. Supervisory authorities in turn have the right to impose fines up to 4% or 20.000.000 \u20ac of the global revenue of a company. This means that companies can no longer sweep data breaches under the rug and must spend resources to secure their data processing. In the scope of the cloud this means that our cloud environment has to be set up in a secure way to avoid data breaches.","title":"Data breaches"},{"location":"lectures/1-cloud-intro/#clarifying_lawful_overseas_use_of_data_act_cloud_2018_usa","text":"The CLOUD Act, or House Rule 4943 is the latest addition to the US legislation pertaining to cloud providers. This act says that a cloud provider must hand over data to US authorities if requested even if that data is stored in a different country. This act has been widely criticized and is, according to several legal scholars, in contradiction of the GDPR. The large US cloud providers have opened up subsidiaries in the EU in order to try and shield their european customers from this act and a few purely EU cloud providers have also capitalized on this. It remains to be seen how effective this move is.","title":"Clarifying Lawful Overseas Use of Data Act (C.L.O.U.D., 2018, USA)"},{"location":"lectures/1-cloud-intro/#digital_millennium_copyright_act_dmca_1998_usa","text":"The Digital Millenium Copyright Act clarifies how copyright works in the USA. Since the USA is part of the WIPO copyright treaty and a significant amount of providers are based in the USA nowadays all countries align themselves with the DMCA when it comes to dealing with online copyright infringement. Title II of the DMCA creates a safe harbor for online service providers against copyright infringement committed by their users. However, they have to remove infringing content as soon as they are properly notified of it via a DMCA takedown notice. The author of a DMCA takedown notice must swear by the penalty of perjury that they are, or are acting on behalf of the copyright owner. (If they were to make this pledge in bad faith they could end up in prison.) If the DMCA takedown notice has been sent erroneously the original uploader is free to send a counter-notification, also swearing under the penalty of perjury. In this case the provider notifies the original sender and restores the content. The original sender then has to take the uploader to court to pursue the matter further.","title":"Digital Millennium Copyright Act (D.M.C.A., 1998, USA)"},{"location":"lectures/1-cloud-intro/#communications_decency_act_section_230_cda_1996_usa","text":"This section of of the CDA is very short: No provider or user of an interactive computer service shall be treated as the publisher or speaker of any information provided by another information content provider. To someone not well versed in US legal lingo this may be sound like gibberish but it is, in fact, one of the most important pieces of legislation pertaining to operating platforms in the cloud. In US legal history the speaker or publisher of certain information is responsible for the information being provided. Before the CDA any provider hosting illegal content would be responsible for said content. The CDA changed that by shielding providers from liability. This included web hosting providers as well as newspapers that had a content section. The CDA is not limitless, providers still have to remove infringing content if notified. They may also employ moderation proactively.","title":"Communications Decency Act, Section 230 (C.D.A., 1996, USA)"},{"location":"lectures/1-cloud-intro/#the_fall_of_privacy_shield_and_standard_contract_clauses_2020_eu-us","text":"The Privacy Shield agreement (2016) was the successor to the failed International Safe Harbor Privacy Principles framework and is intend to protect the privacy of EU citizens when using US services or their data is transferred to the USA. The Privacy Shield has been enhanced in 2017 by the EU\u2013US Umbrella Agreement which fixed many of the issues with the Privacy Shield. Unfortunately for cloud users, Privacy Shield has been invalidated by the CJEU . This decision means that you, as a European cloud user, can no longer automatically use a US-governed cloud provider without accepting liability. The first SCC is Decision 2001/497/EC which states that both parties (you as the cloud user, and the cloud provider) are both jointly and severally liable for any data breaches. The second SCC is Decision 2004/915/EC is more business friendly amd merely makes sure that the that both the European party and the non-European party upheld their obligation to handle data with due care and implement protection measures. Shared liability would only apply if the terms of the SCC were breached. While this is a step forward, it is worth noting that this puts the responsibility on the cloud customer if the cloud provider breaches the terms by, for example, handing over data to US authorities covertly. The third SCC is Decision 2010/87/EU and was adopted by Google and AWS , for example. It creates a safety net for the cloud provider by only requiring them to disclose requests by law enforcement if that would not put criminal liability on them. It also puts any liability for damages on the cloud user unless they, for example, went bankrupt. In that case the cloud provider is only responsible for their own operations, not those of the cloud user. In order words, you the cloud user are responsible for any breaches of data due to US law enforcement requests .","title":"The fall of Privacy Shield and Standard Contract Clauses (2020, EU-US)"},{"location":"lectures/2-iaas/","text":"Download PPTX \ud83d\udcbb Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac Infrastructure as a Service Infrastructure as a Service, or IaaS is a service offering by most cloud providers that provides virtual machines and the accompanying infrastructure as a service. This lecture will discuss the details of how an IaaS service is built. Virtual machines # Virtualization is a surprisingly old technology. The first virtualized system was the IBM System/370 mainframe with the VM/370 operating system in 1972. The system was different from how we understand virtualization today, but the goal was the same: separate workloads from each other. When you think about mainframes you have to consider that these machines were very expensive and machine time was a scarce resource. Most programs back in those days were batch jobs . They processed a large set of data at once and then terminated. Initially CPUs in personal computers did not have application separation. The x86 line of Intel CPUs only received the protected mode feature with the 80286 in 1982. The operating system (MS/DOS) would run in in real mode and applications could then switch into the new mode to isolate applications from each other. One such application making use of the new mode was Windows that ran on top of MS/DOS. Protected mode introduced the concept of rings in the CPU. The operating system kernel would run in ring 0, device drivers would run in ring 1 and 2 while applications would run in ring 3. The lower ring number meant the higher privilege level. Note Device drivers today typically run on ring 0 instead of 1 or 2. This ring system allowed the operating system to restrict the higher ring numbers from accessing certain functions or memory locations. However, most applications in the day would violate the restrictions of protected mode and could not run in the new mode. Note If you try and set up a really old computer game like Commander Keen in DOSBox you will realize that you have to provide the game itself with very hardware-specific settings. You will, for example, have to provide details for your sound card. This is because the game itself incorporated sound card drivers for Sound Blaster 16 or Gravis Ultrasound cards. A game that would do this could not run in protected mode. To work around the problems with protected mode the 80386 successor introduced virtual mode . The new virtual 8086 mode (VM86) introduced a number of compatibility fixes to enable running old real mode programs in a multitasking environment such as Windows without problems. For instance the CPU would create a simulated virtual memory space the program could write to and translate the virtual addresses to physical addresses internally. It would also capture sensitive instructions and turn them over for control to the kernel. Note VM86 does not capture every instruction the application runs in virtual mode, only the sensitive CPU instructions. This enables legacy applications to run at a reasonable speed. In the mid 2000's CPUs became so powerful that it made sense to not only virtualize applications but whole operating systems including their kernel. This allowed multiple operating systems to run in parallel. However, without CPU support only software virtualization could be achieved. In other words early virtualization software had to simulate a CPU in ring 0 to the guest operating system. Some virtualization techniques, such as Xen required the guest operating system to run a modified kernel to facilitate them running in ring 3. Others employed a number of techniques we won't go into here. Hardware vendors, of course, followed suit. In 2005 Intel added the VT-x (Vanderpool) feature to its new Pentium 4 CPUs followed by AMDs SVM/AMD-V technology in 2006 in the Athlon 64, Athlon 64 X2, and Athlon 64 FX processors. VT-x and AMD-V added new ring -1 to accommodate hypervisors . This new ring allowed for separation between several operating systems running at ring 0. Later CPU releases added features such as Direct Input/Output virtualization , network virtualization or even graphics card virtualization. These features allowed for more efficient virtualization and sharing hardware devices between several virtual machines. Note Intel also introduced a ring -2 for the Intel Management Engine , a chip that functions as an OOBM in modern Intel chips. The ME runs its own operating system, a MINIX variant and has been the target of severe criticism for its secrecy and power over the machine. Several bugs have been found in the ME that let an attacker hide a malware inside the ME . Virtualization also gave rise to Infrastructure as a Service. AWS was the first service that offered virtual machines as a service starting in 2006 with a Xen-based offer. They not only offered virtual machines but they did so that a customer could order or cancel the service using an Application Programming Interface . This allowed customers to create virtual machines as they needed it and they were billed for it on an hourly basis. (Later on AWS and other cloud providers moved to a per-second billing.) The presence of an API makes the difference between IaaS and plain old virtual machines as a service. IaaS allows a customer to scale their application dynamically according to their current demand. Typical instance types # When the cloud became popular in the late 2000s several providers attempted to offer a service that was fully dynamic in their sizes. The customer could set how many GB of RAM they needed and how many CPU cores. However, this model has been phased out by most providers since it is difficult to manage such a dynamic environment. Instead most cloud providers nowadays opt to offer fixed machine sizes. To accommodate high-CPU and high RAM workloads there are several different instance types, typically: Shared CPU: These are small instances where a single CPU core is shared between multiple virtual machines, sometimes leading to high steal time . Sometimes this offering includes a burst capability (such as the Amazon T instances) where a VM can temporarily use more CPU. Standard, dedicated core CPU: These instance types receive one or more physical cores leading to a more stable performance without the ability to burst beyond their limits. High CPU: These instance types are usually hosted on physical servers that have a very high CPU to RAM ratio. Accordingly, the virtual machine offering includes more CPU than the standard offering. High RAM: This offering is the exact opposite of the high CPU offering. The machines on offer here include more RAM with very little CPU. Storage: These instance types contain large amounts of local storage (see below in the storage section). Hardware-specific: These instance types offer access to dedicated hardware such as graphics cards (GPUs) or FPGAs. Automation # As discussed before, that makes an IaaS cloud provider a cloud provider is the fact that they offer an API to automate the provisioning and deprovisioning of virtual machines as needed. However, that's not all. Simply starting a virtual machine is not enough, the software needs to be installed in it. Initially this problem would be solved by creating templates for the operating system that launches. In larger cloud setups these templates included a pre-installed agent for configuration management that would report to a central service and fetch its manifest of software to install. Thankfully in the last decade a lot has happened and Cloud Init has established itself as a defacto standard in the IaaS world. Every cloud provider nowadays offers the ability to submit a user data field when creating a virtual machine. This user data file is read by Cloud Init (or its Windows alternative Cloudbase Init ) and is executed at the first start of the virtual machine. A DevOps engineer can simply inject a script that runs at the first start that takes care of all the installation steps required. Tools like Terraform or Ansible assist with managing the whole process of provisioning the virtual machines and supplying it with the correct user data script. Virtual machine pools # One other use of user data are virtual machine pools. Each cloud provider adopts a different name for them, ranging from instance pools to autoscaling groups. The concept is the same everywhere: you supply the cloud with a configuration how you would like your virtual machines to look like and the cloud will take care that the given number of machines are always running. If a machine crashes or fails a health check the cloud deletes the machine and creates a new one. The number of machines in a pool can, of course, be changed either manually or in some cases automatically using rules for automatic scaling. Combined with the aforementioned user data this can be a very powerful tool to create a dynamically sized pool of machines and is the prime choice for creating a scalable architecture. These pools are often integrated with the various load-balancer offerings cloud providers have in their portfolio to direct traffic to the dynamic number of instances. Some cloud providers integrate them with their Functions as a Service offering as well allowing you to run a custom function whenever a machine starts or stops. This can be used to, for example, update your own service discovery database. Storage # When it comes to data storage virtual machines work exactly like your physical machine would: there is a physical disk (or multiple) that store the files. The difference is that in the cloud your virtual machine may make use of a distributed storage architecture instead of using a local disk. In a distributed storage system the data isn't stored on the machine that runs the virtual machine so a hardware failure on that machine will not cause a data loss. However, a distributed storage system is generally either slower or more expensive for the same performance by several magnitudes so using a local storage may still be needed for some use cases. When we talk about storage systems we are talking about two types: block devices and filesystems. On they physical disk data is stored in its raw form so the disk itself has no information about which data belongs to which file. Filesystems organize data into blocks of a fixed or dynamic size and then create a database (mapping table) of which file entry consists of which blocks of data. Keep in mind that the blocks of a single file may be distributed all over the whole disk randomly so that's something the filesystem must keep track of. Therefore we traditionally call raw disk devices block devices . Block devices are (with very few exceptions) only accessible from a single virtual or physical machine since otherwise the machines would have to synchronize their file system operations on that device. The only notable exception is GFS2 . While you can use GFS2 over a shared storage infrastructure if you have control over it cloud providers enforce a single-VM access policy. In other words, one block storage device can only ever be used by a single VM. Local Storage # As described above the simplest and most widely supported option to store data from your virtual machine is a disk that is locally attached to the physical machine running the VM. This option offers you the highest performance at a relatively low price point. The reason for that is that it is the simplest and cheapest to build. Some cloud providers offer disk redundancy ( RAID ) while others don't. At any rate a hardware failure on they physical machine means that your data may become unavailable for a period of time or may be completely lost. It is therefore very advisable to solve redundancy on top of the virtual machine, e.g. by building a replicated database setup. If, however, your database is replicated anyway you may no longer need the more expensive storage options and this can be a great way to save costs. Network Block Storage # Network block storage means a block storage that is delivered over the network. The network here can mean a traditional IP network or a dedicated Fibre Channel infrastructure. As described before block storage is, in general, single-VM only. You can't access the files stored on a block storage device from multiple virtual machines. Also note that Network Block Storage does not automatically come with redundancy. Some solutions, such as iSCSI simply offer the disk of one machine to another. More advanced ones like Ceph RBD or the cloud provider offerings such as EBS by Amazon , however, do offer redundancy. At any rate, using Network Block Storage does not absolve you from the duty to make backups and have a documented and tested disaster recovery strategy. Network File Systems # In contrast to network block storage network file systems offer access to data not on a block level, but on a file level. Over the various network file system protocols machines using these file systems can open, read and write files, and even place locks on them. The filesystem has to keep track of which machine has which file open, or has locks on which file. When machine edit the same file in parallel the filesystem has to ensure that these writes are consistent. This means that network file systems are either much slower than block-level access (e.g. NFS ) or require a great deal more CPU and RAM to keep track of the changes across the network (e.g. CephFS ). Object storage # Object storage systems are similar to network file systems in that they deal with files rather than blocks. However, they do not have the same synchronization capabilities as network file systems. Files can generally only be read or written as a whole and they also don't have the ability to lock a file. While object storages technically can be used as a filesystem on an operating system level for example by using s3fs this is almost always a bad idea due to the exceptionally bad performance and stability issues. Operating system level integration should only be used as a last resort and object storages should be integrated on the application level. We will discuss object storage services in detail in our next lesson. Network # The next big topic concerning IaaS services is networks. Before we go into the cloud-aspect let's look at how the underlying infrastructure is built. As indicated in the first lecture it is strongly recommended that you familiarize yourself with the basics of computer networking, such as the Ethernet, IP and TCP protocols as you will need them to understand this section. How cloud networks are built # So, let's get started. Imagine a data center from the first lecture. Your task is to build an IaaS cloud provider. You put your servers that will serve as your hosts for virtual machines in the racks. These servers will be connected to the Top-of-Rack switches (yes, two for redundancy) using 10 GBit/s network cables. The switches are themselves connected among each other and across racks with several 100 GBit/s. This sounds like a lot of bandwidth available but keep in mind that your virtual machines get assigned to the physical machines as capacity allows. There is no cloud provider that can guarantee the bandwidth or latency between two virtual machines. Generally cloud providers only state the theoretical bandwidth of the connection a virtual machine has to the switching fabric, but not the specific bandwidth between two distinct virtual machines. This is part of the reason why in the cloud scaling horizontally (adding more machines) is preferred rather than creating huge instances with lots of resources. Network architectures offered by cloud providers # When we look at the network offerings by cloud providers there are three types: Private-only network with NAT : This option is provided by the larger cloud providers such as AWS , Azure , GCP and IBM . This setup gives each virtual machine a private IP address on a private network only. When a public IP address is needed that public IP is handled by the gateway provided by the cloud provider and the incoming traffic is forwarded to the virtual machine on the private network using Destination NAT . Multiple private networks (VPC's) can be assigned to a virtual machine and they can work independently. Default public IP : This option is provided by smaller IaaS providers such as DigitalOcean , Exoscale , Hetzner , Linode , Upcloud , and Vultr . In this setup each virtual machine is attached to a public network and is directly assigned one public IP address. Optionally private networks can be attached as well but the first public IP generally cannot be removed as it is required for user data to work. Fully customizable: This setup allows the customer to design their network connectivity as they see fit. This setup is suitable for enterprise customers who want to move their on-premises setup into the cloud without changing their architecture (lift-and-shift). This option is offered by 1&1 IONOS . Note There are several other cloud providers which we have no information on, such as the Deutsche/Open Telekom Cloud , or the Alibaba Cloud . You can classify any cloud provider you come across into these categories. Note Out of group 2 it is worth mentioning that the services that are available on the public network (firewalls, load balancers) are often not available on private networks. TODO: add illustration Firewalling # IaaS providers often also offer network firewalls as a service, included in the platform. Firewalls generally have two rule types: INGRESS (from the Internet or other machines to the current VM) and EGRESS (from the current VM to everywhere else). Firewall providers often employ the concept of security groups . The implementation varies greatly, but in general security groups are a reusable set of rules that can be applied to a VM. For most cloud providers you will need to create an explicit rule allowing traffic to flow between two machines in the same security group. The advantage of security groups is that the rules can be made in such a way that they reference other security groups rather than specific IP addresses. For example, the database security group could be set to allow connections only from the appserver security group but not from anywhere else. This can help with the dynamic nature of the cloud since you do not need to hard-code the IP addresses of the application servers. TODO: add screenshot of security group configuration Network load balancers # Network load balancers are an option some cloud providers offer. In contrast to Application Load Balancers they do not offer protocol decoding (such as routing requests to backends based on the requested web address), they only balance incoming connections to a pool of backends. TODO add illustration Depending on the cloud provider in question network load balancers may or may not offer terminating encrypted connections (SSL/TLS), and may be bound to virtual machine pools. It is also cloud provider specific if load balancers are offered in private networks or not. When designing an architecture it is worth considering if the real IP address of the connecting client will be needed. If the backend needs to know the real IP address of the client and the network load balancer handles SSL/TLS termination that combination may not be suitable for the task unless a specific trick such as the proxy protocol from Digital Ocean . Network load balancers without SSL/TLS termination should, in general, make the client IP available to the backends. When talking about load balancers an interesting question is the load balancing strategy. Most load balancers support either round robin (selecting the next backend in the list) or source hashing (routing the same connecting IP to the same backend). Most load balancers also support health checks to take backends that are not able to serve traffic out of the rotation. VPNs, private interconnects, and routing services # While it seems convenient at first to use only the public network several organizations have security models that prevent accidental public exposure of services not only by implementing the appropriate firewalls (e.g. with security groups) but also by not having private services on the public internet at all. To connect these internal services you must be on a private network. However, this presents a problem when moving data between several, geographically distributed locations. Most companies don't own continent-spanning fiber channel backbones where they could simply create a private network without going on the internet on. This means that most companies have to choose one of two methods if they want to create a private connectivity between locations (and the cloud): an MPLS tunnel or VPN . MPLS tunnels create a virtual connectivity that does not go on the Internet. While being expensive and slow to set up, it can offer a guaranteed bandwidth, latency and better security than a VPN. VPN's on the other hand create a virtual connectivity by sending data over the Internet in an encrypted form. Bandwidth or latency cannot be guaranteed, and there are several drawbacks (such as decreased MTU ) but it's a very affordable solution. Larger cloud providers tend to offer both options. MPLS is supported by the larger cloud providers ( AWS Direct connect , Azure Express Route , or Google Cloud Interconnect ) and also some smaller ones (e.g. Exoscale Private Connect ). VPN is also offered mostly by large providers ( AWS VPC VPN , Azure VPN , or Google Cloud VPN ). However, keep in mind that this VPN is a site-to-site VPN built on IPSec and requires a fixed IP address on your side as well. In other words you can't use this VPN to connect from your laptop to the cloud on the go. The only cloud service that offers a mobile device to cloud connectivity at the time of writing is Azure's Point-to-Site VPN . It is also worth noting that VPN's can be used to connect cloud providers together. DNS # The Domain Name Service is one of the services that are all but required for building an infrastructure. It provides domain name to IP address resolution, such as pointing your domain example.com to an IP address of your servers. There is a difference, however, between DNS services on offer. Some DNS services by cloud providers offer only simple resolution, other providers offer more advanced features. These features include being able to host the DNS service only on a private network without exposing it to the internet. More advanced features may include automatic DNS failover. This involves running regular health checks on your services and if your primary service fails the DNS service can automatically switch to the secondary IP. There are even services that offer advanced functionality such as routing traffic to different servers based on the geographic location of the client. This can be used for advanced builds such as building a custom CDN . Monitoring # Some cloud providers offer included basic monitoring, such as CPU or memory usage. Some providers are offering monitoring agents you can install on your virtual machine to get more data in the monitoring interface. With some cloud providers monitoring alerts can be integrated with virtual machine pools to provide automatic scaling, either automatically or using lambdas/FaaS, which we will talk about in the next lecture . Automation #","title":"2. Infrastructure as a Service"},{"location":"lectures/2-iaas/#virtual_machines","text":"Virtualization is a surprisingly old technology. The first virtualized system was the IBM System/370 mainframe with the VM/370 operating system in 1972. The system was different from how we understand virtualization today, but the goal was the same: separate workloads from each other. When you think about mainframes you have to consider that these machines were very expensive and machine time was a scarce resource. Most programs back in those days were batch jobs . They processed a large set of data at once and then terminated. Initially CPUs in personal computers did not have application separation. The x86 line of Intel CPUs only received the protected mode feature with the 80286 in 1982. The operating system (MS/DOS) would run in in real mode and applications could then switch into the new mode to isolate applications from each other. One such application making use of the new mode was Windows that ran on top of MS/DOS. Protected mode introduced the concept of rings in the CPU. The operating system kernel would run in ring 0, device drivers would run in ring 1 and 2 while applications would run in ring 3. The lower ring number meant the higher privilege level. Note Device drivers today typically run on ring 0 instead of 1 or 2. This ring system allowed the operating system to restrict the higher ring numbers from accessing certain functions or memory locations. However, most applications in the day would violate the restrictions of protected mode and could not run in the new mode. Note If you try and set up a really old computer game like Commander Keen in DOSBox you will realize that you have to provide the game itself with very hardware-specific settings. You will, for example, have to provide details for your sound card. This is because the game itself incorporated sound card drivers for Sound Blaster 16 or Gravis Ultrasound cards. A game that would do this could not run in protected mode. To work around the problems with protected mode the 80386 successor introduced virtual mode . The new virtual 8086 mode (VM86) introduced a number of compatibility fixes to enable running old real mode programs in a multitasking environment such as Windows without problems. For instance the CPU would create a simulated virtual memory space the program could write to and translate the virtual addresses to physical addresses internally. It would also capture sensitive instructions and turn them over for control to the kernel. Note VM86 does not capture every instruction the application runs in virtual mode, only the sensitive CPU instructions. This enables legacy applications to run at a reasonable speed. In the mid 2000's CPUs became so powerful that it made sense to not only virtualize applications but whole operating systems including their kernel. This allowed multiple operating systems to run in parallel. However, without CPU support only software virtualization could be achieved. In other words early virtualization software had to simulate a CPU in ring 0 to the guest operating system. Some virtualization techniques, such as Xen required the guest operating system to run a modified kernel to facilitate them running in ring 3. Others employed a number of techniques we won't go into here. Hardware vendors, of course, followed suit. In 2005 Intel added the VT-x (Vanderpool) feature to its new Pentium 4 CPUs followed by AMDs SVM/AMD-V technology in 2006 in the Athlon 64, Athlon 64 X2, and Athlon 64 FX processors. VT-x and AMD-V added new ring -1 to accommodate hypervisors . This new ring allowed for separation between several operating systems running at ring 0. Later CPU releases added features such as Direct Input/Output virtualization , network virtualization or even graphics card virtualization. These features allowed for more efficient virtualization and sharing hardware devices between several virtual machines. Note Intel also introduced a ring -2 for the Intel Management Engine , a chip that functions as an OOBM in modern Intel chips. The ME runs its own operating system, a MINIX variant and has been the target of severe criticism for its secrecy and power over the machine. Several bugs have been found in the ME that let an attacker hide a malware inside the ME . Virtualization also gave rise to Infrastructure as a Service. AWS was the first service that offered virtual machines as a service starting in 2006 with a Xen-based offer. They not only offered virtual machines but they did so that a customer could order or cancel the service using an Application Programming Interface . This allowed customers to create virtual machines as they needed it and they were billed for it on an hourly basis. (Later on AWS and other cloud providers moved to a per-second billing.) The presence of an API makes the difference between IaaS and plain old virtual machines as a service. IaaS allows a customer to scale their application dynamically according to their current demand.","title":"Virtual machines"},{"location":"lectures/2-iaas/#typical_instance_types","text":"When the cloud became popular in the late 2000s several providers attempted to offer a service that was fully dynamic in their sizes. The customer could set how many GB of RAM they needed and how many CPU cores. However, this model has been phased out by most providers since it is difficult to manage such a dynamic environment. Instead most cloud providers nowadays opt to offer fixed machine sizes. To accommodate high-CPU and high RAM workloads there are several different instance types, typically: Shared CPU: These are small instances where a single CPU core is shared between multiple virtual machines, sometimes leading to high steal time . Sometimes this offering includes a burst capability (such as the Amazon T instances) where a VM can temporarily use more CPU. Standard, dedicated core CPU: These instance types receive one or more physical cores leading to a more stable performance without the ability to burst beyond their limits. High CPU: These instance types are usually hosted on physical servers that have a very high CPU to RAM ratio. Accordingly, the virtual machine offering includes more CPU than the standard offering. High RAM: This offering is the exact opposite of the high CPU offering. The machines on offer here include more RAM with very little CPU. Storage: These instance types contain large amounts of local storage (see below in the storage section). Hardware-specific: These instance types offer access to dedicated hardware such as graphics cards (GPUs) or FPGAs.","title":"Typical instance types"},{"location":"lectures/2-iaas/#automation","text":"As discussed before, that makes an IaaS cloud provider a cloud provider is the fact that they offer an API to automate the provisioning and deprovisioning of virtual machines as needed. However, that's not all. Simply starting a virtual machine is not enough, the software needs to be installed in it. Initially this problem would be solved by creating templates for the operating system that launches. In larger cloud setups these templates included a pre-installed agent for configuration management that would report to a central service and fetch its manifest of software to install. Thankfully in the last decade a lot has happened and Cloud Init has established itself as a defacto standard in the IaaS world. Every cloud provider nowadays offers the ability to submit a user data field when creating a virtual machine. This user data file is read by Cloud Init (or its Windows alternative Cloudbase Init ) and is executed at the first start of the virtual machine. A DevOps engineer can simply inject a script that runs at the first start that takes care of all the installation steps required. Tools like Terraform or Ansible assist with managing the whole process of provisioning the virtual machines and supplying it with the correct user data script.","title":"Automation"},{"location":"lectures/2-iaas/#virtual_machine_pools","text":"One other use of user data are virtual machine pools. Each cloud provider adopts a different name for them, ranging from instance pools to autoscaling groups. The concept is the same everywhere: you supply the cloud with a configuration how you would like your virtual machines to look like and the cloud will take care that the given number of machines are always running. If a machine crashes or fails a health check the cloud deletes the machine and creates a new one. The number of machines in a pool can, of course, be changed either manually or in some cases automatically using rules for automatic scaling. Combined with the aforementioned user data this can be a very powerful tool to create a dynamically sized pool of machines and is the prime choice for creating a scalable architecture. These pools are often integrated with the various load-balancer offerings cloud providers have in their portfolio to direct traffic to the dynamic number of instances. Some cloud providers integrate them with their Functions as a Service offering as well allowing you to run a custom function whenever a machine starts or stops. This can be used to, for example, update your own service discovery database.","title":"Virtual machine pools"},{"location":"lectures/2-iaas/#storage","text":"When it comes to data storage virtual machines work exactly like your physical machine would: there is a physical disk (or multiple) that store the files. The difference is that in the cloud your virtual machine may make use of a distributed storage architecture instead of using a local disk. In a distributed storage system the data isn't stored on the machine that runs the virtual machine so a hardware failure on that machine will not cause a data loss. However, a distributed storage system is generally either slower or more expensive for the same performance by several magnitudes so using a local storage may still be needed for some use cases. When we talk about storage systems we are talking about two types: block devices and filesystems. On they physical disk data is stored in its raw form so the disk itself has no information about which data belongs to which file. Filesystems organize data into blocks of a fixed or dynamic size and then create a database (mapping table) of which file entry consists of which blocks of data. Keep in mind that the blocks of a single file may be distributed all over the whole disk randomly so that's something the filesystem must keep track of. Therefore we traditionally call raw disk devices block devices . Block devices are (with very few exceptions) only accessible from a single virtual or physical machine since otherwise the machines would have to synchronize their file system operations on that device. The only notable exception is GFS2 . While you can use GFS2 over a shared storage infrastructure if you have control over it cloud providers enforce a single-VM access policy. In other words, one block storage device can only ever be used by a single VM.","title":"Storage"},{"location":"lectures/2-iaas/#local_storage","text":"As described above the simplest and most widely supported option to store data from your virtual machine is a disk that is locally attached to the physical machine running the VM. This option offers you the highest performance at a relatively low price point. The reason for that is that it is the simplest and cheapest to build. Some cloud providers offer disk redundancy ( RAID ) while others don't. At any rate a hardware failure on they physical machine means that your data may become unavailable for a period of time or may be completely lost. It is therefore very advisable to solve redundancy on top of the virtual machine, e.g. by building a replicated database setup. If, however, your database is replicated anyway you may no longer need the more expensive storage options and this can be a great way to save costs.","title":"Local Storage"},{"location":"lectures/2-iaas/#network_block_storage","text":"Network block storage means a block storage that is delivered over the network. The network here can mean a traditional IP network or a dedicated Fibre Channel infrastructure. As described before block storage is, in general, single-VM only. You can't access the files stored on a block storage device from multiple virtual machines. Also note that Network Block Storage does not automatically come with redundancy. Some solutions, such as iSCSI simply offer the disk of one machine to another. More advanced ones like Ceph RBD or the cloud provider offerings such as EBS by Amazon , however, do offer redundancy. At any rate, using Network Block Storage does not absolve you from the duty to make backups and have a documented and tested disaster recovery strategy.","title":"Network Block Storage"},{"location":"lectures/2-iaas/#network_file_systems","text":"In contrast to network block storage network file systems offer access to data not on a block level, but on a file level. Over the various network file system protocols machines using these file systems can open, read and write files, and even place locks on them. The filesystem has to keep track of which machine has which file open, or has locks on which file. When machine edit the same file in parallel the filesystem has to ensure that these writes are consistent. This means that network file systems are either much slower than block-level access (e.g. NFS ) or require a great deal more CPU and RAM to keep track of the changes across the network (e.g. CephFS ).","title":"Network File Systems"},{"location":"lectures/2-iaas/#object_storage","text":"Object storage systems are similar to network file systems in that they deal with files rather than blocks. However, they do not have the same synchronization capabilities as network file systems. Files can generally only be read or written as a whole and they also don't have the ability to lock a file. While object storages technically can be used as a filesystem on an operating system level for example by using s3fs this is almost always a bad idea due to the exceptionally bad performance and stability issues. Operating system level integration should only be used as a last resort and object storages should be integrated on the application level. We will discuss object storage services in detail in our next lesson.","title":"Object storage"},{"location":"lectures/2-iaas/#network","text":"The next big topic concerning IaaS services is networks. Before we go into the cloud-aspect let's look at how the underlying infrastructure is built. As indicated in the first lecture it is strongly recommended that you familiarize yourself with the basics of computer networking, such as the Ethernet, IP and TCP protocols as you will need them to understand this section.","title":"Network"},{"location":"lectures/2-iaas/#how_cloud_networks_are_built","text":"So, let's get started. Imagine a data center from the first lecture. Your task is to build an IaaS cloud provider. You put your servers that will serve as your hosts for virtual machines in the racks. These servers will be connected to the Top-of-Rack switches (yes, two for redundancy) using 10 GBit/s network cables. The switches are themselves connected among each other and across racks with several 100 GBit/s. This sounds like a lot of bandwidth available but keep in mind that your virtual machines get assigned to the physical machines as capacity allows. There is no cloud provider that can guarantee the bandwidth or latency between two virtual machines. Generally cloud providers only state the theoretical bandwidth of the connection a virtual machine has to the switching fabric, but not the specific bandwidth between two distinct virtual machines. This is part of the reason why in the cloud scaling horizontally (adding more machines) is preferred rather than creating huge instances with lots of resources.","title":"How cloud networks are built"},{"location":"lectures/2-iaas/#network_architectures_offered_by_cloud_providers","text":"When we look at the network offerings by cloud providers there are three types: Private-only network with NAT : This option is provided by the larger cloud providers such as AWS , Azure , GCP and IBM . This setup gives each virtual machine a private IP address on a private network only. When a public IP address is needed that public IP is handled by the gateway provided by the cloud provider and the incoming traffic is forwarded to the virtual machine on the private network using Destination NAT . Multiple private networks (VPC's) can be assigned to a virtual machine and they can work independently. Default public IP : This option is provided by smaller IaaS providers such as DigitalOcean , Exoscale , Hetzner , Linode , Upcloud , and Vultr . In this setup each virtual machine is attached to a public network and is directly assigned one public IP address. Optionally private networks can be attached as well but the first public IP generally cannot be removed as it is required for user data to work. Fully customizable: This setup allows the customer to design their network connectivity as they see fit. This setup is suitable for enterprise customers who want to move their on-premises setup into the cloud without changing their architecture (lift-and-shift). This option is offered by 1&1 IONOS . Note There are several other cloud providers which we have no information on, such as the Deutsche/Open Telekom Cloud , or the Alibaba Cloud . You can classify any cloud provider you come across into these categories. Note Out of group 2 it is worth mentioning that the services that are available on the public network (firewalls, load balancers) are often not available on private networks. TODO: add illustration","title":"Network architectures offered by cloud providers"},{"location":"lectures/2-iaas/#firewalling","text":"IaaS providers often also offer network firewalls as a service, included in the platform. Firewalls generally have two rule types: INGRESS (from the Internet or other machines to the current VM) and EGRESS (from the current VM to everywhere else). Firewall providers often employ the concept of security groups . The implementation varies greatly, but in general security groups are a reusable set of rules that can be applied to a VM. For most cloud providers you will need to create an explicit rule allowing traffic to flow between two machines in the same security group. The advantage of security groups is that the rules can be made in such a way that they reference other security groups rather than specific IP addresses. For example, the database security group could be set to allow connections only from the appserver security group but not from anywhere else. This can help with the dynamic nature of the cloud since you do not need to hard-code the IP addresses of the application servers. TODO: add screenshot of security group configuration","title":"Firewalling"},{"location":"lectures/2-iaas/#network_load_balancers","text":"Network load balancers are an option some cloud providers offer. In contrast to Application Load Balancers they do not offer protocol decoding (such as routing requests to backends based on the requested web address), they only balance incoming connections to a pool of backends. TODO add illustration Depending on the cloud provider in question network load balancers may or may not offer terminating encrypted connections (SSL/TLS), and may be bound to virtual machine pools. It is also cloud provider specific if load balancers are offered in private networks or not. When designing an architecture it is worth considering if the real IP address of the connecting client will be needed. If the backend needs to know the real IP address of the client and the network load balancer handles SSL/TLS termination that combination may not be suitable for the task unless a specific trick such as the proxy protocol from Digital Ocean . Network load balancers without SSL/TLS termination should, in general, make the client IP available to the backends. When talking about load balancers an interesting question is the load balancing strategy. Most load balancers support either round robin (selecting the next backend in the list) or source hashing (routing the same connecting IP to the same backend). Most load balancers also support health checks to take backends that are not able to serve traffic out of the rotation.","title":"Network load balancers"},{"location":"lectures/2-iaas/#vpns_private_interconnects_and_routing_services","text":"While it seems convenient at first to use only the public network several organizations have security models that prevent accidental public exposure of services not only by implementing the appropriate firewalls (e.g. with security groups) but also by not having private services on the public internet at all. To connect these internal services you must be on a private network. However, this presents a problem when moving data between several, geographically distributed locations. Most companies don't own continent-spanning fiber channel backbones where they could simply create a private network without going on the internet on. This means that most companies have to choose one of two methods if they want to create a private connectivity between locations (and the cloud): an MPLS tunnel or VPN . MPLS tunnels create a virtual connectivity that does not go on the Internet. While being expensive and slow to set up, it can offer a guaranteed bandwidth, latency and better security than a VPN. VPN's on the other hand create a virtual connectivity by sending data over the Internet in an encrypted form. Bandwidth or latency cannot be guaranteed, and there are several drawbacks (such as decreased MTU ) but it's a very affordable solution. Larger cloud providers tend to offer both options. MPLS is supported by the larger cloud providers ( AWS Direct connect , Azure Express Route , or Google Cloud Interconnect ) and also some smaller ones (e.g. Exoscale Private Connect ). VPN is also offered mostly by large providers ( AWS VPC VPN , Azure VPN , or Google Cloud VPN ). However, keep in mind that this VPN is a site-to-site VPN built on IPSec and requires a fixed IP address on your side as well. In other words you can't use this VPN to connect from your laptop to the cloud on the go. The only cloud service that offers a mobile device to cloud connectivity at the time of writing is Azure's Point-to-Site VPN . It is also worth noting that VPN's can be used to connect cloud providers together.","title":"VPNs, private interconnects, and routing services"},{"location":"lectures/2-iaas/#dns","text":"The Domain Name Service is one of the services that are all but required for building an infrastructure. It provides domain name to IP address resolution, such as pointing your domain example.com to an IP address of your servers. There is a difference, however, between DNS services on offer. Some DNS services by cloud providers offer only simple resolution, other providers offer more advanced features. These features include being able to host the DNS service only on a private network without exposing it to the internet. More advanced features may include automatic DNS failover. This involves running regular health checks on your services and if your primary service fails the DNS service can automatically switch to the secondary IP. There are even services that offer advanced functionality such as routing traffic to different servers based on the geographic location of the client. This can be used for advanced builds such as building a custom CDN .","title":"DNS"},{"location":"lectures/2-iaas/#monitoring","text":"Some cloud providers offer included basic monitoring, such as CPU or memory usage. Some providers are offering monitoring agents you can install on your virtual machine to get more data in the monitoring interface. With some cloud providers monitoring alerts can be integrated with virtual machine pools to provide automatic scaling, either automatically or using lambdas/FaaS, which we will talk about in the next lecture .","title":"Monitoring"},{"location":"lectures/2-iaas/#automation_1","text":"","title":"Automation"},{"location":"lectures/3-xaas/","text":"Download PPTX \ud83d\udcbb Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac Beyond IaaS This lecture walks you through the most important services offered by cloud providers beyond the IaaS layers. Sometimes this is called \"PaaS\" (Platform as a Service) indicating that it is intended as a developer platform. The easiest way to remember the difference is that IaaS offers virtual machines and connected services. In order to operate on top of an IaaS platform you need someone skilled in running an operating system. In other words, you need a system administrator. PaaS on the other hand is intended for developers. The platform services, on the other hand, are intended for developers. The main goal of PaaS services is enabling developers to deploy applications without having to manage the operating system of the underlying virtual machine. There is, however, nothing preventing you from mixing IaaS and PaaS services. A typical use case would be using a managed database with virtual machines. This helps smaller teams because operating a database proficiently on a small scale can be an undue burden. This might not seem like a big deal but consider that databases store data. Every time when data storage is concerned disaster recovery becomes more complex. If an IaaS team were to operate a database themselves they would need to regularly test backups and disaster recovery procedures. Managed databases take that complexity away. Similarly, building a redundant database system that can perform an automatic failover requires a high skill level in managing that specific database engine. This skill level may not be available in small teams, or a small team may not want to spend time on managing the database instead of focusing on their core objective. Application load balancers # Application load balancers provide load balancing capabilities on layer 7 of the OSI-model . In practice application load balancers on offer support HTTP and HTTPS load balancing. HTTP is a request-response protocol. Typically connections are short-lived but longer connections (e.g. with Websockets ) are also possible. Good application load balancers allow sending traffic to a different set of backends based on the host name ( example.com ) as well as the path ( /some/address ). Some applications also require that subsequent requests from the same client end up on the same backend. This is called session stickiness and can be achieved in a variety of ways. Less advanced solutions route requests based on the source IP, while more advanced versions send a so-called cookie to the client and route subsequent requests based on that cookie. Sticky sessions, however, present a problem: when a backend goes down the users of that backend will be redistributed to other backends. In practice this usually means that users will be logged out. When a cascading fault, or a rolling update occurs that takes down multiple backends in rapid succession users can be subjected to multiple involuntary logouts. This has an adverse effect on user experience which is why newer, so-called \u201ccloud native\u201d applications don't use sticky sessions. Instead, cloud native applications put client-specific data (e.g. session data ) in database systems with redundancy. Sessions themselves have their own race condition problems , but that is not a discussion for this lecture. CDNs # While it seems the Internet is blazing fast nowadays delivering content to the other side of the planet is still an issue. As you may know most of the Internet is comprised of fiber optic cabling . Data is transmitted by turning a laser on and off in rapid succession. Let's do a little mental exercise: the speed of light is 299.792.458 m/s. The radius of our planet is 6.371 km. A ray of light should be able to round the planet in 6.371.000 / 299.792.458 = 0.021 seconds. In other words any data transmitted should be able to travel around the world in ~21 milliseconds. Yet, in practice we see latencies upwards of 100 ms when transmitting data from Europe to India. The issue is that light does not go \u201caround the corner\u201d. Fiber optic cables work by having reflective walls so the light bounces off the walls repeatedly to reach the end. This multiplies the way light has to travel to reach the other side of the planet. This is further compounded by the fact that light can only travel so far in a fiber optic cable, repeaters and routers in between also need time to process the data. The problem is further compounded by how HTTP works. When a website is loaded there are several elements that have to wait for each other. The website may reference a style sheet (CSS file), the CSS file may reference an image and so on. This means several round trips have to be done to build a page. HTTP/2 server push attempts to mitigate this. CDN's work around this problem by replicating content to servers closer to the users. When a user requests a certain file that request lands on the CDN's edge node first. If the CDN has the file in the cache the delivery is very fast. If, however, the CDN does not have the content in cache the delivery will take longer. In essence, CDN's help with latency issues if the content can be cached . in other words, this helps mostly with static content, but in combination with functions as a service (see below) dynamic content can also be delivered from edge nodes to some extent. Did you know? Low latency connections are important not just for delivering content. Stock exchanges benefit from very low latencies. For example, there is a private microwave network between Frankfurt and London that has twice the speed of the public internet. Did you know? SpaceX is building the Starlink network to provide lower latency connectivity across the globe. Object Storage # In the previous lecture we briefly mentioned object storages. As a reminder, traditional block storage devices and the filesystems implemented on top of them have several features you may consider advanced: Multiple programs can open the same file in parallel, Files can be read and written partially, Locks can be placed on files preventing other processes from accessing them. Object storages are different. The most popular Amazon S3 protocol offers the ability to up- and download, list and delete files. However, files can only be uploaded as a whole, partial reads or writes are not possible. Consistency is also not guaranteed when multiple programs are accessing the same files in parallel. However, due to the limited featureset object storages have a few unique abilities not afforded by traditional block storage: They are redundant over multiple servers by design. The loss of a single physical machine does not mean a data loss. The S3 protocol offers the ability to place ACL's (access control lists) on the objects uploaded to the object storage. This allows making files publicly accessible over the web without needing to maintain a server. Some object storage implementations offer the ability to keep multiple versions of files. Clients can be prevented from deleting older versions making versioning an effective data loss prevention mechanism. Some object storage implementations offer the ability to lock files from being modified in the future. This is especially important when adhering to corporate or government data retention requirements. Cold storage # Some providers offer an extension to their object storage system that puts data in cold storage (e.g. on tape ). Data can be uploaded directly via the API, or in the case of very large data amounts shipped to the provider on hard drives. Did you know? \u201cNever underestimate the bandwidth of a truck full of hard drives.\u201d \u2014 is an industry saying that kept its validity to this day. Since the data is stored on offline (cold) storage the data retrieval is not as immediate as with the object storage. To retrieve data from cold storage you often need to wait several hours until the data becomes available. Therefore, an effective backup strategy to the cloud often involves moving data to the object storage first and only older backups to cold storage. Amazon, for example, allows for automating this process using S3 lifecycle rules . Databases as a Service (DBaaS) # As mentioned before, one of the most difficult services to operate are ones that store state. They are also highly standardized between cloud providers. This makes them an ideal candidate for a company to use PaaS instead of managing everything in-house. Database consistency # When considering which database offering to use database consistency plays a key role. It is a common occurrence that startups pick, for example, MongoDB because of its \u201chipness\u201d instead of it considering the benefits and drawbacks of this (or any other) database solution. One of the important aspects of databases is the way they offer consistency. Traditional SQL-style databases often supports what's called ACID-compliance . This stands for Atomicity, Consistency, Isolation, and Durability. Atomicity guarantees that series of database operations will either occur as a whole or not at all. The practical implementation of atomicity are transactions . Consistency guarantees that if an operation would violate the rules of a database (whatever they may be) the whole transaction is rolled back to a previously known good state. Isolation guarantees that two transactions executing at the same time will not affect each other. While this can be turned on it is very resource intensive and database engines often allow for a lower isolation level to increase performance. Durability guarantees that, if a user has received a success message the data is actually stored. This guarantee is not met by most NoSQL databases. In contrast, most NoSQL databases implement BASE: Basic Availability guarantees that the database is available most of the time. Soft-state allows for data to be non-consistent. In other words, the database doesn't have to be \u201cin-sync\u201d across all database replicas. Eventual consistency allows for written data to be translated across multiple replicas at a future point in time. This is, of course, the theory. In practice even BASE-compliant databases tend to offer some ACID-features. For example, MongoDB supports transactions for atomicity, but is still a BASE system. The above two database types are illustrated by the CAP theorem . The CAP theorem says that out of Consistency, Availability, and Partition tolerance only two can be chosen at any given time. The trick here is that partition tolerance means that a system can survive when the network is split in two parts. This is not optional, so we can pick between CP and AP databases. CP databases will guarantee that a database operation will either fail or if successful, be consistent across all replicas. We will never have a case where a change is not yet translated to a replica and we receive outdated information. This is, in practice, often achieved by quorum . When a network is split in two only the nodes that can form a majority are able to perform database operations. Nodes that are not able to join the majority cannot perform database operations. AP databases on the other hand will always serve database operations, but cannot guarantee consistency. The data read may be outdated. Database writes may be lost if the node goes down before it is able to transmit the data to the other nodes. There are benefits for both and the appropriate database type must be chosen for the task at hand. Relational databases (SQL) # SQL or relational databases are one of the more traditional database systems. They use predefined data tables with fixed columns and datatypes. Most SQL databases also allow creating references between tables. These references or foreign keys allow for validation. For example, you could create database that has an articles and a comments table. Since the comments table could reference the articles table it would be impossible to create a comment with an invalid article ID. While it is easy to make the assumption that RDBMS implement ACID compliance (CP) in most cases it is only true when the database is run on a single node. When using replication most RDBMS implement asynchronous replication which puts them partially in the BASE / AP territory. When using a managed database make sure your cloud provider supports a replication that suits your consistency needs. Document databases # Document databases offer the user the ability to store a structured document, such as a JSON file. Often it also creates indexes over these documents that allow for quick searching. While SQL databases enforce fixed columns, document databases often offer the ability to use fields dynamically. While this may make development easier in the early stages it also presents some risks. Since the database engine does not validate the field names it is easier to create a mess in the database with typos, inconsistent changes, etc. It is therefore recommended to create a strict data model in the application layer. Most document databases fall strictly in the BASE/AP category when it comes to replication. Time Series databases # Time-series databases are usually used in monitoring systems and store numeric values associated with a certain timestamp. One of the most famous cloud-native monitoring system with an integrated time-series databases is Prometheus . Graph databases # Graph databases are special databases that store relationships of datasets with each other and allow making queries over them. These database types can be used for creating social graphs, interests, etc. Functions as a Service (FaaS / Lambda) # Functions as a Service or Lambdas are a way to run custom code without having to worry about the runtime environment. These pieces of code are triggered by events: a timer, a message in a message queue, or an incoming HTTP request. To make this easier to understand let's consider a hypothetical scenario: let's say you want to have an up to date list of IP addresses of all virtual machines you are running. In this case you have two options. Option one is to run a piece of code every few minutes to update the IP list. However, this may not be fast enough, and it may also not scale with a very large number of machines. So your other option is to use a FaaS function to react to the fact that a new instance has been launched or an instance has been destroyed. This function would be called every time there is a change . In a different scenario FaaS would give you the ability to run small amounts of program code on CDN edge nodes giving you the ability for fast, dynamic content delivery. One such service is Lambda@Edge by Amazon . However, keep in mind that FaaS may have limitations in terms of performance. To conserve processing power the cloud provider will shut down runtime environments not in use and a restart may take longer than usual. This may, for example, destroy the advantage edge node lambda functions have in terms of latency for low traffic sites. Containers as a Service (CaaS) # Containers are a way to run applications in an isolated environment without dedicating a full virtual machine to them. However, as you might imagine, containers are not magic and cannot automatically move from one physical server to another. This, and many other tasks are the job of container orchestrators such as Kubernetes. Since Kubernetes and its alternatives are incredibly complex to operate many cloud providers take on this burden, and offer containers as a service to customers. Note that containers are the topic of the next lecture so we won't cover them in detail here. Stream processing and Business Intelligence tools # One of the most complex setups to run in an on-premises environment is something nowadays known as a datalake. IT aggregates data from many different source databases and allows data scientists to extract valuable information from it. It is not uncommon to see several dozen source database. What's more, some analysees require close to real time data processing. The tools usually seen in such as setup are HDFS , Apache Spark , Kafka , and several more. The number of source databases and the number of tools listed here should tell you how complex such a setup can be. This is one of the reasons why even large, traditional corporations are seriously considering moving their data analytics into the cloud. Deployment pipelines # While there are many, many more services on offer in the cloud we'd like to mention a final piece to the puzzle: CI/CD systems or deployment pipelines. These deployment pipelines allow a DevOps engineer to build automatic software deployment systems with relative ease. The general idea is that the code is handled in a version control system such as git. When the code is pushed into the version control system an automatic build and deployment process is started. This can involve compiling the source code to automatic tests running. The deployment pipeline then takes care of copying the software to the appropriate environment, such as creating a container and deploying it to the CaaS environment or creating virtual machines with the appropriate code. When this service is offered by the cloud provider that runs the infrastructure themselves, these are usually tightly integrated, allowing a prospective user to simply point-and-click to create the whole environment. It is debatable if such an automatically created environment is suitable for production use, but it may give a good starting point to customize the setup from.","title":"3. Beyond IaaS"},{"location":"lectures/3-xaas/#application_load_balancers","text":"Application load balancers provide load balancing capabilities on layer 7 of the OSI-model . In practice application load balancers on offer support HTTP and HTTPS load balancing. HTTP is a request-response protocol. Typically connections are short-lived but longer connections (e.g. with Websockets ) are also possible. Good application load balancers allow sending traffic to a different set of backends based on the host name ( example.com ) as well as the path ( /some/address ). Some applications also require that subsequent requests from the same client end up on the same backend. This is called session stickiness and can be achieved in a variety of ways. Less advanced solutions route requests based on the source IP, while more advanced versions send a so-called cookie to the client and route subsequent requests based on that cookie. Sticky sessions, however, present a problem: when a backend goes down the users of that backend will be redistributed to other backends. In practice this usually means that users will be logged out. When a cascading fault, or a rolling update occurs that takes down multiple backends in rapid succession users can be subjected to multiple involuntary logouts. This has an adverse effect on user experience which is why newer, so-called \u201ccloud native\u201d applications don't use sticky sessions. Instead, cloud native applications put client-specific data (e.g. session data ) in database systems with redundancy. Sessions themselves have their own race condition problems , but that is not a discussion for this lecture.","title":"Application load balancers"},{"location":"lectures/3-xaas/#cdns","text":"While it seems the Internet is blazing fast nowadays delivering content to the other side of the planet is still an issue. As you may know most of the Internet is comprised of fiber optic cabling . Data is transmitted by turning a laser on and off in rapid succession. Let's do a little mental exercise: the speed of light is 299.792.458 m/s. The radius of our planet is 6.371 km. A ray of light should be able to round the planet in 6.371.000 / 299.792.458 = 0.021 seconds. In other words any data transmitted should be able to travel around the world in ~21 milliseconds. Yet, in practice we see latencies upwards of 100 ms when transmitting data from Europe to India. The issue is that light does not go \u201caround the corner\u201d. Fiber optic cables work by having reflective walls so the light bounces off the walls repeatedly to reach the end. This multiplies the way light has to travel to reach the other side of the planet. This is further compounded by the fact that light can only travel so far in a fiber optic cable, repeaters and routers in between also need time to process the data. The problem is further compounded by how HTTP works. When a website is loaded there are several elements that have to wait for each other. The website may reference a style sheet (CSS file), the CSS file may reference an image and so on. This means several round trips have to be done to build a page. HTTP/2 server push attempts to mitigate this. CDN's work around this problem by replicating content to servers closer to the users. When a user requests a certain file that request lands on the CDN's edge node first. If the CDN has the file in the cache the delivery is very fast. If, however, the CDN does not have the content in cache the delivery will take longer. In essence, CDN's help with latency issues if the content can be cached . in other words, this helps mostly with static content, but in combination with functions as a service (see below) dynamic content can also be delivered from edge nodes to some extent. Did you know? Low latency connections are important not just for delivering content. Stock exchanges benefit from very low latencies. For example, there is a private microwave network between Frankfurt and London that has twice the speed of the public internet. Did you know? SpaceX is building the Starlink network to provide lower latency connectivity across the globe.","title":"CDNs"},{"location":"lectures/3-xaas/#object_storage","text":"In the previous lecture we briefly mentioned object storages. As a reminder, traditional block storage devices and the filesystems implemented on top of them have several features you may consider advanced: Multiple programs can open the same file in parallel, Files can be read and written partially, Locks can be placed on files preventing other processes from accessing them. Object storages are different. The most popular Amazon S3 protocol offers the ability to up- and download, list and delete files. However, files can only be uploaded as a whole, partial reads or writes are not possible. Consistency is also not guaranteed when multiple programs are accessing the same files in parallel. However, due to the limited featureset object storages have a few unique abilities not afforded by traditional block storage: They are redundant over multiple servers by design. The loss of a single physical machine does not mean a data loss. The S3 protocol offers the ability to place ACL's (access control lists) on the objects uploaded to the object storage. This allows making files publicly accessible over the web without needing to maintain a server. Some object storage implementations offer the ability to keep multiple versions of files. Clients can be prevented from deleting older versions making versioning an effective data loss prevention mechanism. Some object storage implementations offer the ability to lock files from being modified in the future. This is especially important when adhering to corporate or government data retention requirements.","title":"Object Storage"},{"location":"lectures/3-xaas/#cold_storage","text":"Some providers offer an extension to their object storage system that puts data in cold storage (e.g. on tape ). Data can be uploaded directly via the API, or in the case of very large data amounts shipped to the provider on hard drives. Did you know? \u201cNever underestimate the bandwidth of a truck full of hard drives.\u201d \u2014 is an industry saying that kept its validity to this day. Since the data is stored on offline (cold) storage the data retrieval is not as immediate as with the object storage. To retrieve data from cold storage you often need to wait several hours until the data becomes available. Therefore, an effective backup strategy to the cloud often involves moving data to the object storage first and only older backups to cold storage. Amazon, for example, allows for automating this process using S3 lifecycle rules .","title":"Cold storage"},{"location":"lectures/3-xaas/#databases_as_a_service_dbaas","text":"As mentioned before, one of the most difficult services to operate are ones that store state. They are also highly standardized between cloud providers. This makes them an ideal candidate for a company to use PaaS instead of managing everything in-house.","title":"Databases as a Service (DBaaS)"},{"location":"lectures/3-xaas/#database_consistency","text":"When considering which database offering to use database consistency plays a key role. It is a common occurrence that startups pick, for example, MongoDB because of its \u201chipness\u201d instead of it considering the benefits and drawbacks of this (or any other) database solution. One of the important aspects of databases is the way they offer consistency. Traditional SQL-style databases often supports what's called ACID-compliance . This stands for Atomicity, Consistency, Isolation, and Durability. Atomicity guarantees that series of database operations will either occur as a whole or not at all. The practical implementation of atomicity are transactions . Consistency guarantees that if an operation would violate the rules of a database (whatever they may be) the whole transaction is rolled back to a previously known good state. Isolation guarantees that two transactions executing at the same time will not affect each other. While this can be turned on it is very resource intensive and database engines often allow for a lower isolation level to increase performance. Durability guarantees that, if a user has received a success message the data is actually stored. This guarantee is not met by most NoSQL databases. In contrast, most NoSQL databases implement BASE: Basic Availability guarantees that the database is available most of the time. Soft-state allows for data to be non-consistent. In other words, the database doesn't have to be \u201cin-sync\u201d across all database replicas. Eventual consistency allows for written data to be translated across multiple replicas at a future point in time. This is, of course, the theory. In practice even BASE-compliant databases tend to offer some ACID-features. For example, MongoDB supports transactions for atomicity, but is still a BASE system. The above two database types are illustrated by the CAP theorem . The CAP theorem says that out of Consistency, Availability, and Partition tolerance only two can be chosen at any given time. The trick here is that partition tolerance means that a system can survive when the network is split in two parts. This is not optional, so we can pick between CP and AP databases. CP databases will guarantee that a database operation will either fail or if successful, be consistent across all replicas. We will never have a case where a change is not yet translated to a replica and we receive outdated information. This is, in practice, often achieved by quorum . When a network is split in two only the nodes that can form a majority are able to perform database operations. Nodes that are not able to join the majority cannot perform database operations. AP databases on the other hand will always serve database operations, but cannot guarantee consistency. The data read may be outdated. Database writes may be lost if the node goes down before it is able to transmit the data to the other nodes. There are benefits for both and the appropriate database type must be chosen for the task at hand.","title":"Database consistency"},{"location":"lectures/3-xaas/#relational_databases_sql","text":"SQL or relational databases are one of the more traditional database systems. They use predefined data tables with fixed columns and datatypes. Most SQL databases also allow creating references between tables. These references or foreign keys allow for validation. For example, you could create database that has an articles and a comments table. Since the comments table could reference the articles table it would be impossible to create a comment with an invalid article ID. While it is easy to make the assumption that RDBMS implement ACID compliance (CP) in most cases it is only true when the database is run on a single node. When using replication most RDBMS implement asynchronous replication which puts them partially in the BASE / AP territory. When using a managed database make sure your cloud provider supports a replication that suits your consistency needs.","title":"Relational databases (SQL)"},{"location":"lectures/3-xaas/#document_databases","text":"Document databases offer the user the ability to store a structured document, such as a JSON file. Often it also creates indexes over these documents that allow for quick searching. While SQL databases enforce fixed columns, document databases often offer the ability to use fields dynamically. While this may make development easier in the early stages it also presents some risks. Since the database engine does not validate the field names it is easier to create a mess in the database with typos, inconsistent changes, etc. It is therefore recommended to create a strict data model in the application layer. Most document databases fall strictly in the BASE/AP category when it comes to replication.","title":"Document databases"},{"location":"lectures/3-xaas/#time_series_databases","text":"Time-series databases are usually used in monitoring systems and store numeric values associated with a certain timestamp. One of the most famous cloud-native monitoring system with an integrated time-series databases is Prometheus .","title":"Time Series databases"},{"location":"lectures/3-xaas/#graph_databases","text":"Graph databases are special databases that store relationships of datasets with each other and allow making queries over them. These database types can be used for creating social graphs, interests, etc.","title":"Graph databases"},{"location":"lectures/3-xaas/#functions_as_a_service_faas_lambda","text":"Functions as a Service or Lambdas are a way to run custom code without having to worry about the runtime environment. These pieces of code are triggered by events: a timer, a message in a message queue, or an incoming HTTP request. To make this easier to understand let's consider a hypothetical scenario: let's say you want to have an up to date list of IP addresses of all virtual machines you are running. In this case you have two options. Option one is to run a piece of code every few minutes to update the IP list. However, this may not be fast enough, and it may also not scale with a very large number of machines. So your other option is to use a FaaS function to react to the fact that a new instance has been launched or an instance has been destroyed. This function would be called every time there is a change . In a different scenario FaaS would give you the ability to run small amounts of program code on CDN edge nodes giving you the ability for fast, dynamic content delivery. One such service is Lambda@Edge by Amazon . However, keep in mind that FaaS may have limitations in terms of performance. To conserve processing power the cloud provider will shut down runtime environments not in use and a restart may take longer than usual. This may, for example, destroy the advantage edge node lambda functions have in terms of latency for low traffic sites.","title":"Functions as a Service (FaaS / Lambda)"},{"location":"lectures/3-xaas/#containers_as_a_service_caas","text":"Containers are a way to run applications in an isolated environment without dedicating a full virtual machine to them. However, as you might imagine, containers are not magic and cannot automatically move from one physical server to another. This, and many other tasks are the job of container orchestrators such as Kubernetes. Since Kubernetes and its alternatives are incredibly complex to operate many cloud providers take on this burden, and offer containers as a service to customers. Note that containers are the topic of the next lecture so we won't cover them in detail here.","title":"Containers as a Service (CaaS)"},{"location":"lectures/3-xaas/#stream_processing_and_business_intelligence_tools","text":"One of the most complex setups to run in an on-premises environment is something nowadays known as a datalake. IT aggregates data from many different source databases and allows data scientists to extract valuable information from it. It is not uncommon to see several dozen source database. What's more, some analysees require close to real time data processing. The tools usually seen in such as setup are HDFS , Apache Spark , Kafka , and several more. The number of source databases and the number of tools listed here should tell you how complex such a setup can be. This is one of the reasons why even large, traditional corporations are seriously considering moving their data analytics into the cloud.","title":"Stream processing and Business Intelligence tools"},{"location":"lectures/3-xaas/#deployment_pipelines","text":"While there are many, many more services on offer in the cloud we'd like to mention a final piece to the puzzle: CI/CD systems or deployment pipelines. These deployment pipelines allow a DevOps engineer to build automatic software deployment systems with relative ease. The general idea is that the code is handled in a version control system such as git. When the code is pushed into the version control system an automatic build and deployment process is started. This can involve compiling the source code to automatic tests running. The deployment pipeline then takes care of copying the software to the appropriate environment, such as creating a container and deploying it to the CaaS environment or creating virtual machines with the appropriate code. When this service is offered by the cloud provider that runs the infrastructure themselves, these are usually tightly integrated, allowing a prospective user to simply point-and-click to create the whole environment. It is debatable if such an automatically created environment is suitable for production use, but it may give a good starting point to customize the setup from.","title":"Deployment pipelines"},{"location":"lectures/4-containers/","text":"Download PPTX \ud83d\udcbb Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac Containers & Kubernetes In the second lecture we have talked about how applications interact with the kernel and the hardware. By now you know that applications running in ring 3 do not have direct access to things like the disk. To access those details they need to execute a system call to the kernel. The kernel will then give the application the details required, for example a file from the disk. Let's play a hypothetical game: process A wants to access a file called test.txt . It calls the kernel, the file is opened, and process A is now free to read the contents. When process B comes along and does the same, it will receive the same file. Or does it? In the Linux kernel the filesystem root directory (starting with / ) is a virtual construct that can be changed on a per-process basis. It is possible to make process A see a completely different folder structure then process B. This mechanism is called chroot . It is, in fact, so old that it predates Linux by more than a decade and was first present in Version 7 Unix in 1979. Try it out yourself! Run the following command on a 64 bit x86 Linux in an empty folder: mkdir -p ./bin &&\\ curl \"https://www.busybox.net/downloads/binaries/1.21.1/busybox-x86_64\" -o ./bin/busybox && \\ chmod +x ./bin/busybox && \\ ./bin/busybox --install ./bin && \\ sudo chroot . /bin/sh You should now be able to run ls -la or similar commands and see that you are in an almost empty filesystem with no ability to access the files outside. This alone only isolates the two process on a filesystem level, there are still plenty of opportunities for two processes to interact, for example: On the network Interprocess Communication (IPC) Sending signals to each other by process ID etc. In the early 2000's there were two projects that attempted to implement process isolation in the Linux kernel: OpenVZ and Linux-VServer . Running these projects required patching and recompiling the Linux kernel from source. Starting around 2006 several companies, including Google, IBM, SGI, Bull, and the OpenVZ project itself has put significant effort into taking OpenVZ apart and piece by piece and submitting it to the Linux kernel. The User Beancounters from OpenVZ, for example, became cgroups and allow resource allocation to a group of processes. Do you want to know more about history? The history of containerization is surprisingly hard to piece together despite the relative young age of the technology. If you want a bit of a deeper dive take a look at \u201cA Brief History of Containers (by Jeff Victor & Kir Kolyshkin)\u201d . All these isolation technologies, together, form what's today known as Linux containers. Windows has undergone a similar development in recent years, and has virtualized the typical Windows interaction points between processe: job objects, process table, registry, filesystem, etc. In essence, containers don't exist . They are a collection of technologies that provide process-level isolation for an application. These isolation techniques can, among others, include: A separate, virtual network card Process separation (no ability to send signals to other containers) A separate view of the filesystem Restricted IPC between containers User separation / user ID mapping Do you want to build your own container engine? You can! Take a look at Liz Rice's Containers From Scratch talk! Container images # Docker was not the first technology to create containers using the modern Linux API's, but it was the one that made containers popular. The edge Docker had over its competitors was the way it dealt with images. Other container solutions at the time, like LXC, tried to emulate virtual machines where a full operating system would be installed, and then updated. Docker chose a different route. A Dockerfile would contain the instructions needed to build a container image containing the application that should be containerized. These instructions would be executed and resulted in a container image. This container image could then be used to launch one or more copies of it. Since the container image contains everything the application needs to run these images are ideal operating system independent packages. This solves the age-old problem of having to install the correct version of the runtime environment (PHP, Python, Java, etc) as it is contained within the container image. When a container is run this container image is the basis for all the data that is contained within. The data is, however, not copied. If the application modifies or creates files only the difference is stored. This makes containers very lightweight on the storage front as well. Docker went one step further, they introduced a way to share images between machines using a registry , a server that stores container images. The public Docker hub contains a vast array of images built by the community. These technologies were later all standardized under the Open Container Initiative , creating a company-independent format for containers and technologies around them. Warning Third party container images should be treated with the same due diligence like installing third party software on your computer! They can contain malicious code and can cause harm despite the containerization. The container lifecycle # You can, of course, update a running container just as you would a traditional virtual machine. However, that is not the intended, or indeed, optimal way to use them. The intention of containers is immutable infrastructure . Immutable infrastructure means that containers are never updated . Instead, they are replaced. When a new version of a software needs to be installed the old container is shut down and a new one is launched from a new image. Immutable infrastructure presents a massive benefit: instead of having to deal with a downtime when the upgrade is ran, the updated version can be tested before it is launched. However, this concept reaches its limits when it comes to running software that needs to store data in a persistent fashion, for example, databases. For this purpose containers can designate special folders to be mounted as volumes . Volumes can be persisted by either mounting them as a folder from the host machine, or by mounting a network-based storage system. Orchestration (Swarm, Kubernetes, etc) # Docker and other container runtimes do not manage containers across multiple servers by themselves. Docker has received an addon called Docker Swarm, but nowadays the clear winner of the \u201cContainer Wars\u201d is Kubernetes . Container orchestrators are responsible for determining which server has free capacity and schedule containers to run on them. When a server fails these orchestrators are responsible for discovering it and re-launching them on a different server. Furthermore, container orchestrators contain a certain amount of integration with the cloud providers. Docker Swarm has very basic integrations, but Kubernetes on the other hand, has integrations with just about anything. Depending on the cloud provider Kubernetes can automatically move block storage mounts to a different server when a container is moved, configure cloud load balancers and much more. This flexibility comes at a cost: Kubernetes is very complex. A detailed explanation on how to deploy an application on Kubernetes would vastly exceed the bounds of this course. If you are interested in this topic we recommend taking a look at one of the many Certified Kubernetes Application Developer courses on the Internet. Container networking # As mentioned previously, containers regularly have their own, virtual network interfaces. This virtual network interface can be connected in a number of ways. If we take a look at Docker's default networking model the virtual network interface is connected to an internal network bridge . This enables containers to connect to each other. For connections to the Internet a NAT is performed. More advanced options for container networking create a single virtual network across several hosts and connect the containers to this virtual network. This is an option with Docker Swarm and is always the case with Kubernetes . When you look at these graphics, one question may come to mind: the cloud is quite dynamic in its nature, so how does a Kubernetes cluster receive incoming connections? After all, each of the nodes may be replaced with a new one, with a new IP address at any time? This is where the immense feature set of Kubernetes begins to show itself. Kubernetes includes several controllers that can interact with cloud providers in a variety of ways. One of these integrations can be, for example, the load balancer integrations. The Kubernetes network can be extended to a load balancer and that load balancer can send traffic directly over the virtual network used by the containers. Further helping the dynamic nature of the cloud are features like the ability to create internal firewalls. These firewalls can help mitigate possible security vulnerabilities like SSRF . Since these firewalls can be created using the same API as the software deployment, the firewall rules for an application can be versioned in Git, for example. Since everything required to run an application can be stored in a Dockerfile and a Kubernetes manifest the application source code can be self-contained. This is, of course, only true if the application is written in such a way that workes well with the cloud. This is described in the next lecture .","title":"4. Containers"},{"location":"lectures/4-containers/#container_images","text":"Docker was not the first technology to create containers using the modern Linux API's, but it was the one that made containers popular. The edge Docker had over its competitors was the way it dealt with images. Other container solutions at the time, like LXC, tried to emulate virtual machines where a full operating system would be installed, and then updated. Docker chose a different route. A Dockerfile would contain the instructions needed to build a container image containing the application that should be containerized. These instructions would be executed and resulted in a container image. This container image could then be used to launch one or more copies of it. Since the container image contains everything the application needs to run these images are ideal operating system independent packages. This solves the age-old problem of having to install the correct version of the runtime environment (PHP, Python, Java, etc) as it is contained within the container image. When a container is run this container image is the basis for all the data that is contained within. The data is, however, not copied. If the application modifies or creates files only the difference is stored. This makes containers very lightweight on the storage front as well. Docker went one step further, they introduced a way to share images between machines using a registry , a server that stores container images. The public Docker hub contains a vast array of images built by the community. These technologies were later all standardized under the Open Container Initiative , creating a company-independent format for containers and technologies around them. Warning Third party container images should be treated with the same due diligence like installing third party software on your computer! They can contain malicious code and can cause harm despite the containerization.","title":"Container images"},{"location":"lectures/4-containers/#the_container_lifecycle","text":"You can, of course, update a running container just as you would a traditional virtual machine. However, that is not the intended, or indeed, optimal way to use them. The intention of containers is immutable infrastructure . Immutable infrastructure means that containers are never updated . Instead, they are replaced. When a new version of a software needs to be installed the old container is shut down and a new one is launched from a new image. Immutable infrastructure presents a massive benefit: instead of having to deal with a downtime when the upgrade is ran, the updated version can be tested before it is launched. However, this concept reaches its limits when it comes to running software that needs to store data in a persistent fashion, for example, databases. For this purpose containers can designate special folders to be mounted as volumes . Volumes can be persisted by either mounting them as a folder from the host machine, or by mounting a network-based storage system.","title":"The container lifecycle"},{"location":"lectures/4-containers/#orchestration_swarm_kubernetes_etc","text":"Docker and other container runtimes do not manage containers across multiple servers by themselves. Docker has received an addon called Docker Swarm, but nowadays the clear winner of the \u201cContainer Wars\u201d is Kubernetes . Container orchestrators are responsible for determining which server has free capacity and schedule containers to run on them. When a server fails these orchestrators are responsible for discovering it and re-launching them on a different server. Furthermore, container orchestrators contain a certain amount of integration with the cloud providers. Docker Swarm has very basic integrations, but Kubernetes on the other hand, has integrations with just about anything. Depending on the cloud provider Kubernetes can automatically move block storage mounts to a different server when a container is moved, configure cloud load balancers and much more. This flexibility comes at a cost: Kubernetes is very complex. A detailed explanation on how to deploy an application on Kubernetes would vastly exceed the bounds of this course. If you are interested in this topic we recommend taking a look at one of the many Certified Kubernetes Application Developer courses on the Internet.","title":"Orchestration (Swarm, Kubernetes, etc)"},{"location":"lectures/4-containers/#container_networking","text":"As mentioned previously, containers regularly have their own, virtual network interfaces. This virtual network interface can be connected in a number of ways. If we take a look at Docker's default networking model the virtual network interface is connected to an internal network bridge . This enables containers to connect to each other. For connections to the Internet a NAT is performed. More advanced options for container networking create a single virtual network across several hosts and connect the containers to this virtual network. This is an option with Docker Swarm and is always the case with Kubernetes . When you look at these graphics, one question may come to mind: the cloud is quite dynamic in its nature, so how does a Kubernetes cluster receive incoming connections? After all, each of the nodes may be replaced with a new one, with a new IP address at any time? This is where the immense feature set of Kubernetes begins to show itself. Kubernetes includes several controllers that can interact with cloud providers in a variety of ways. One of these integrations can be, for example, the load balancer integrations. The Kubernetes network can be extended to a load balancer and that load balancer can send traffic directly over the virtual network used by the containers. Further helping the dynamic nature of the cloud are features like the ability to create internal firewalls. These firewalls can help mitigate possible security vulnerabilities like SSRF . Since these firewalls can be created using the same API as the software deployment, the firewall rules for an application can be versioned in Git, for example. Since everything required to run an application can be stored in a Dockerfile and a Kubernetes manifest the application source code can be self-contained. This is, of course, only true if the application is written in such a way that workes well with the cloud. This is described in the next lecture .","title":"Container networking"},{"location":"lectures/5-cloud-native/","text":"Download PPTX \ud83d\udcbb Download MP3 \ud83c\udfa7 Download M4B \ud83c\udfa7 Watch Video \ud83c\udfac Cloud Native Software Development Software development doesn't exist in a vacuum. The software will need to run somewhere. While not every software needs to, or indeed will, scale to Google levels, a little forethought can go a long way towards surviving the first contact with the customer hordes. The enemy of scalability: state # Any application that does not store or access data is easy to scale. Simply run more copies of it and put a load balancer in front of it. State can rear its ugly head in obvious, and in more subtle ways. The obvious point state is, for example, your database. When you have data in your database that's a form of state. You can run as many application servers as you want, if the database can't handle the load you're done. As we discussed in the third lecture scaling databases can be quite tricky since the consistency model may not permit scaling. A second point of contention is the ability to store data. Integrating an object storage instead of simply writing data to the disk will, again, help with scaling. A more subtle point of contention may be the storage of sessions. Sessions are usually built by sending the user a session ID via a cookie and then storing a blob of data on the disk or in the database. The problem is not only the storage, but also that moving from a local filesystem to a database may create a race condition that may present a security issue with your application. A similar issue arises when near-realtime data exchange is desired between a large amount of users (e.g. a chat application). While a single server can scale to tens of thousands of users, that server is neither redundant, nor will it serve an endless number of users. PubSub systems can help with that. The Twelve Factor App # Once we survive the first night after the launch of our application it often becomes time to deal with long-term architectural problems. The 12 factor app is a concept that collects the current best practices of writing applications for the cloud. Keep in mind that these are just guidelines and you should never make a religious tyrade out of following these guidelines. Instead, apply common sense and be pragmatic about what to do. 1. Codebase # This first guideline is pretty simple: keep your application in a version control system. While this should be the default in 2020 it unfortunately still bears saying. 2. Dependencies # This recommendation deals with dependencies. Almost every programming language ecosystem nowadays has a dependency manager to handle downloading dependencies. These dependencies should be declared explicitly in the configuration file for the dependency manager (e.g. package.json , composer.json , pom.xml , etc.) Furthermore, these dependency managers often create a lock file ( npm-package-lock.json , composer.lock , etc.). They record the exact versions, and sometimes hashes of the third party library. This ensures that the same exact version is installed in the development and production builds. 3. Configuration # While in older times configuration files had many formats, modern, container-based applications distinctly move towards environment variables . Environment variables are a cross-platform way to provide variables to an application and give a DevOps engineer a flexible way to configure a containerized application. 4. Backing services # External databases, caches, etc. should be treated as such . This means that the connection options (server name, url, username, password, etc) should be configurable via environment variable and should also be replacable by a system administrator by simply reconfiguring the container. Testing the testability is especially important with services that are not as well standardized as a MySQL database. For example, many S3 implementations only support Amazon's version and cannot be configured to use alternative providers. An application following this recommendation should be tested against at least one other S3 provider. 5. The build process # The build recommendation says that the build process should be separated from the runtime configuration and the release process. In practice this means that you don't bake your configuration into your container. It also means that each release should have a version number or date, allowing you to roll back to a specific version. 6. Stateless processes # The processes recommendation says that your application should run as a single program without any shared data between different copies of your application. Any state should be outsourced to an external database or system as mentioned before. 7. Network configuration # The port binding recommendation says that an application is standalone and does not require an external webserver to run. (Typically PHP applications require a bit of legwork to satisfy this requirement.) 8. Process handling # The concurrency recommendation defines a number of rules for process handling. It requires that it should be possible to run multiple copies of the application, optionally across several machines. It also requires that the application should not daemonize . While this may seem as trivial with a green field project, it is definitely a challenge for legacy application. 9. Disposability # This recommendation states that an application should have a fast startup and should also shut down quickly when receiving the TERM signal. Applications should also be able to recover from unexpected crashes. 10. Development/production gap # The dev/prod parity recommendation postulates that developers of apps should strive to have a continuous method of deployment that allows for rapid rollout of updates. This lowers the work a developer needs to go through to deploy and therefore promotes smaller change sets. Smaller change sets make tracking down issues with deployments easier, but can be impractical when working with larger, slower moving clients. (e.g. banks, telcos, etc.) 11. Logs # The logs recommendation should simply write logs to the standard output in a standardized form (e.g. JSON). Everything else, like routing or storing logs, is not the applications concern. In practice each application contains at least some basic logic to filter logs to make it easier to configure the logging level. 12. Tooling # The admin process recommendation concerns itself with the command line tools needed to operate the application. These are things like running database migrations, etc. The recommendation says that these tools should be runnable directly from the applications directory without much extra configuration or installation. Metrics collection # The above 12 factors are, by necessity, limited in scope. The author(s) of those 12 factors have taken many things into account, yet left out others. One of these is metrics collection. As you will learn in the Prometheus exercise , Prometheus has established itself as a defacto standard for monitoring cloud-native applications. It is not uncommon to see applications include a small webserver that exposes internal metrics in the Prometheus data format . This makes monitoring exceedingly easy compared to having to configure a separate monitoring service. Health checks # When dealing with containerized environments it is very important that applications report accurately when they are ready to serve traffic, and when they are having problems. This can be achieved by implementing the HEALTHCHECK directive in the Dockerfile , or by implementing Liveness, Readiness, and Startup Probles in Kubernetes. Microservices # The proliferation of containers has brought about a change in software design aswell: microservices. Microservices is a concept where, instead of building one monolithic application one builds a tiny service for each need. These services are connected across the network, usually via HTTP. On its face this solves the problem of creating an incoherent giant ball of code with code quality. However, experience has shown that this is not true. A team or company that is not able to write a good quality monolith is also not able to design and maintain microservices properly. To write a well designed system, no matter if microservices or monolith, needs to have clean API boundaries between the different parts of the system. Unfortunately, there is no simple way to achieve clean boundaries as there is a host of literature on Clean Code that would exceed the bounds of this course. Where's the difference? For one, it's the network . When you write a monolith you can rely on every call across API boundaries will always, reliably return. With microservices, this is not true. Microservices calls can hang indefinitely. It is possible that the other service simply disappears from the network and you won't even know it. That's why a microservices architecture always needs to include the Circuit Breaker pattern Second, it's the runtime. If there are several microservices calling each other, each service being reasonably fast, the run time can still add up. Imagine 5 microservices calling each other, each woth a maximum runtime of 200ms. That's a one second response time right there! Third, it's the API design. If you break your API in a monolithic application chances are your compiler will bark at you and refuse to compile the code. If you break compatibility across microservices possibly nothing happens. With badly written microservices that ignore missing parameters, for example, systems can break in a really horrifying manner. Microservices make sense, and indeed follow Conway's Law: Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure. \u2014\u2009Melvin E. Conway Conway formulated this in 1968, long before microservices. It still holds true today: microservices in an organization will always follow the team or company structure. For example, there may be several development teams that enjoy the ability to develop and deploy their application parts independently from each other. Or, there may be one development team that needs to gather information from several source systems from different departments. Microservices are also a good idea where boundaries are needed between applications with different technology stacks (e.g. to pass information from Java to Javascript, etc.) However, it makes very little sense for a small development team in a startup, using a homogeneous technology stack to use microservices. The changes are this team will be violating API boundaries all over the place and disregard the requirements for building a network-based distributed system. Ask the Authors If you want a fun story about how microservices can go horribly wrong, ask the authors in the consulting sessions. Loosely typed languages Be careful with loosely typed languages and systems like JavaScript! These systems are very tolerant towards missing parameters, or parameters with incorrect types. This can lead to some disastrous consequences. Further reading While we will not be asking any of the following materials in the test we strongly recommend that you take them as a starting point for your further studies: Clean code S.O.L.I.D. principles Getting started in Object-Oriented Programming What people misunderstand about OOP What the ** is an IoC container? The clean code talks: Unit Testing The clean code talks: OO Design for Testability The clean code talks: Don't look for things! How to design a good API and why it matters Microservices Principles of Microservices 3 common pitfalls of microservices integration Avoiding Microservice Megadisasters Distributed systems Distributed Systems in One Lesson Service meshes, Frameworks, and Tools # Service meshes are a tool to help with building microservices. As mentioned before, microservices are hard. Not only do you have to take the network into account, not only do you have to make the API work together across many different components, you also have to make sure that components find each other. Kubernetes makes sure that there are internal load balancers for each service allowing you to do a basic rollout. However, Kubernetes does not retry failed calls, allow for versioning, implement a circuit breaker, etc. Service meshes like Istio do that. You don't strictly need a service mesh to build microservices, but they make the process easier. This is especially true if you run applications developed by different teams with different tooling, where implementing a common service registration would be hard. We recommend watching Building cloud-native applications with Kubernetes and Istio, by Kelsey Hightower for more details on how Istio works. Alternatively, you can of course use the tools afforded by your framework. If you are in the Java world, you could use Spring Cloud , for example. Spring Cloud will let you register your services with a wide variety of backend services. However, keep in mind: microservices are hard. As a developer you will be curious and willing to learn about them, of course. However, your curiosity may not serve the company's interest as much as you may think it does.","title":"5. Cloud-native software development"},{"location":"lectures/5-cloud-native/#the_enemy_of_scalability_state","text":"Any application that does not store or access data is easy to scale. Simply run more copies of it and put a load balancer in front of it. State can rear its ugly head in obvious, and in more subtle ways. The obvious point state is, for example, your database. When you have data in your database that's a form of state. You can run as many application servers as you want, if the database can't handle the load you're done. As we discussed in the third lecture scaling databases can be quite tricky since the consistency model may not permit scaling. A second point of contention is the ability to store data. Integrating an object storage instead of simply writing data to the disk will, again, help with scaling. A more subtle point of contention may be the storage of sessions. Sessions are usually built by sending the user a session ID via a cookie and then storing a blob of data on the disk or in the database. The problem is not only the storage, but also that moving from a local filesystem to a database may create a race condition that may present a security issue with your application. A similar issue arises when near-realtime data exchange is desired between a large amount of users (e.g. a chat application). While a single server can scale to tens of thousands of users, that server is neither redundant, nor will it serve an endless number of users. PubSub systems can help with that.","title":"The enemy of scalability: state"},{"location":"lectures/5-cloud-native/#the_twelve_factor_app","text":"Once we survive the first night after the launch of our application it often becomes time to deal with long-term architectural problems. The 12 factor app is a concept that collects the current best practices of writing applications for the cloud. Keep in mind that these are just guidelines and you should never make a religious tyrade out of following these guidelines. Instead, apply common sense and be pragmatic about what to do.","title":"The Twelve Factor App"},{"location":"lectures/5-cloud-native/#1_codebase","text":"This first guideline is pretty simple: keep your application in a version control system. While this should be the default in 2020 it unfortunately still bears saying.","title":"1. Codebase"},{"location":"lectures/5-cloud-native/#2_dependencies","text":"This recommendation deals with dependencies. Almost every programming language ecosystem nowadays has a dependency manager to handle downloading dependencies. These dependencies should be declared explicitly in the configuration file for the dependency manager (e.g. package.json , composer.json , pom.xml , etc.) Furthermore, these dependency managers often create a lock file ( npm-package-lock.json , composer.lock , etc.). They record the exact versions, and sometimes hashes of the third party library. This ensures that the same exact version is installed in the development and production builds.","title":"2. Dependencies"},{"location":"lectures/5-cloud-native/#3_configuration","text":"While in older times configuration files had many formats, modern, container-based applications distinctly move towards environment variables . Environment variables are a cross-platform way to provide variables to an application and give a DevOps engineer a flexible way to configure a containerized application.","title":"3. Configuration"},{"location":"lectures/5-cloud-native/#4_backing_services","text":"External databases, caches, etc. should be treated as such . This means that the connection options (server name, url, username, password, etc) should be configurable via environment variable and should also be replacable by a system administrator by simply reconfiguring the container. Testing the testability is especially important with services that are not as well standardized as a MySQL database. For example, many S3 implementations only support Amazon's version and cannot be configured to use alternative providers. An application following this recommendation should be tested against at least one other S3 provider.","title":"4. Backing services"},{"location":"lectures/5-cloud-native/#5_the_build_process","text":"The build recommendation says that the build process should be separated from the runtime configuration and the release process. In practice this means that you don't bake your configuration into your container. It also means that each release should have a version number or date, allowing you to roll back to a specific version.","title":"5. The build process"},{"location":"lectures/5-cloud-native/#6_stateless_processes","text":"The processes recommendation says that your application should run as a single program without any shared data between different copies of your application. Any state should be outsourced to an external database or system as mentioned before.","title":"6. Stateless processes"},{"location":"lectures/5-cloud-native/#7_network_configuration","text":"The port binding recommendation says that an application is standalone and does not require an external webserver to run. (Typically PHP applications require a bit of legwork to satisfy this requirement.)","title":"7. Network configuration"},{"location":"lectures/5-cloud-native/#8_process_handling","text":"The concurrency recommendation defines a number of rules for process handling. It requires that it should be possible to run multiple copies of the application, optionally across several machines. It also requires that the application should not daemonize . While this may seem as trivial with a green field project, it is definitely a challenge for legacy application.","title":"8. Process handling"},{"location":"lectures/5-cloud-native/#9_disposability","text":"This recommendation states that an application should have a fast startup and should also shut down quickly when receiving the TERM signal. Applications should also be able to recover from unexpected crashes.","title":"9. Disposability"},{"location":"lectures/5-cloud-native/#10_developmentproduction_gap","text":"The dev/prod parity recommendation postulates that developers of apps should strive to have a continuous method of deployment that allows for rapid rollout of updates. This lowers the work a developer needs to go through to deploy and therefore promotes smaller change sets. Smaller change sets make tracking down issues with deployments easier, but can be impractical when working with larger, slower moving clients. (e.g. banks, telcos, etc.)","title":"10. Development/production gap"},{"location":"lectures/5-cloud-native/#11_logs","text":"The logs recommendation should simply write logs to the standard output in a standardized form (e.g. JSON). Everything else, like routing or storing logs, is not the applications concern. In practice each application contains at least some basic logic to filter logs to make it easier to configure the logging level.","title":"11. Logs"},{"location":"lectures/5-cloud-native/#12_tooling","text":"The admin process recommendation concerns itself with the command line tools needed to operate the application. These are things like running database migrations, etc. The recommendation says that these tools should be runnable directly from the applications directory without much extra configuration or installation.","title":"12. Tooling"},{"location":"lectures/5-cloud-native/#metrics_collection","text":"The above 12 factors are, by necessity, limited in scope. The author(s) of those 12 factors have taken many things into account, yet left out others. One of these is metrics collection. As you will learn in the Prometheus exercise , Prometheus has established itself as a defacto standard for monitoring cloud-native applications. It is not uncommon to see applications include a small webserver that exposes internal metrics in the Prometheus data format . This makes monitoring exceedingly easy compared to having to configure a separate monitoring service.","title":"Metrics collection"},{"location":"lectures/5-cloud-native/#health_checks","text":"When dealing with containerized environments it is very important that applications report accurately when they are ready to serve traffic, and when they are having problems. This can be achieved by implementing the HEALTHCHECK directive in the Dockerfile , or by implementing Liveness, Readiness, and Startup Probles in Kubernetes.","title":"Health checks"},{"location":"lectures/5-cloud-native/#microservices","text":"The proliferation of containers has brought about a change in software design aswell: microservices. Microservices is a concept where, instead of building one monolithic application one builds a tiny service for each need. These services are connected across the network, usually via HTTP. On its face this solves the problem of creating an incoherent giant ball of code with code quality. However, experience has shown that this is not true. A team or company that is not able to write a good quality monolith is also not able to design and maintain microservices properly. To write a well designed system, no matter if microservices or monolith, needs to have clean API boundaries between the different parts of the system. Unfortunately, there is no simple way to achieve clean boundaries as there is a host of literature on Clean Code that would exceed the bounds of this course. Where's the difference? For one, it's the network . When you write a monolith you can rely on every call across API boundaries will always, reliably return. With microservices, this is not true. Microservices calls can hang indefinitely. It is possible that the other service simply disappears from the network and you won't even know it. That's why a microservices architecture always needs to include the Circuit Breaker pattern Second, it's the runtime. If there are several microservices calling each other, each service being reasonably fast, the run time can still add up. Imagine 5 microservices calling each other, each woth a maximum runtime of 200ms. That's a one second response time right there! Third, it's the API design. If you break your API in a monolithic application chances are your compiler will bark at you and refuse to compile the code. If you break compatibility across microservices possibly nothing happens. With badly written microservices that ignore missing parameters, for example, systems can break in a really horrifying manner. Microservices make sense, and indeed follow Conway's Law: Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure. \u2014\u2009Melvin E. Conway Conway formulated this in 1968, long before microservices. It still holds true today: microservices in an organization will always follow the team or company structure. For example, there may be several development teams that enjoy the ability to develop and deploy their application parts independently from each other. Or, there may be one development team that needs to gather information from several source systems from different departments. Microservices are also a good idea where boundaries are needed between applications with different technology stacks (e.g. to pass information from Java to Javascript, etc.) However, it makes very little sense for a small development team in a startup, using a homogeneous technology stack to use microservices. The changes are this team will be violating API boundaries all over the place and disregard the requirements for building a network-based distributed system. Ask the Authors If you want a fun story about how microservices can go horribly wrong, ask the authors in the consulting sessions. Loosely typed languages Be careful with loosely typed languages and systems like JavaScript! These systems are very tolerant towards missing parameters, or parameters with incorrect types. This can lead to some disastrous consequences. Further reading While we will not be asking any of the following materials in the test we strongly recommend that you take them as a starting point for your further studies: Clean code S.O.L.I.D. principles Getting started in Object-Oriented Programming What people misunderstand about OOP What the ** is an IoC container? The clean code talks: Unit Testing The clean code talks: OO Design for Testability The clean code talks: Don't look for things! How to design a good API and why it matters Microservices Principles of Microservices 3 common pitfalls of microservices integration Avoiding Microservice Megadisasters Distributed systems Distributed Systems in One Lesson","title":"Microservices"},{"location":"lectures/5-cloud-native/#service_meshes_frameworks_and_tools","text":"Service meshes are a tool to help with building microservices. As mentioned before, microservices are hard. Not only do you have to take the network into account, not only do you have to make the API work together across many different components, you also have to make sure that components find each other. Kubernetes makes sure that there are internal load balancers for each service allowing you to do a basic rollout. However, Kubernetes does not retry failed calls, allow for versioning, implement a circuit breaker, etc. Service meshes like Istio do that. You don't strictly need a service mesh to build microservices, but they make the process easier. This is especially true if you run applications developed by different teams with different tooling, where implementing a common service registration would be hard. We recommend watching Building cloud-native applications with Kubernetes and Istio, by Kelsey Hightower for more details on how Istio works. Alternatively, you can of course use the tools afforded by your framework. If you are in the Java world, you could use Spring Cloud , for example. Spring Cloud will let you register your services with a wide variety of backend services. However, keep in mind: microservices are hard. As a developer you will be curious and willing to learn about them, of course. However, your curiosity may not serve the company's interest as much as you may think it does.","title":"Service meshes, Frameworks, and Tools"},{"location":"projectwork/","text":"You are the cloud architect for a small work-for-hire company. A client wants to hire you but they are sceptical about your abilities to build an autoscaling service. They propose a proof of concept: build a service that runs a web application that is deliberately slow and load test it. Your cloud management should automatically launch new cloud servers when the load is high and remove servers when demand is low. TODO: which cloud provider? After taking a look at the capabilities of the cloud provider and discussing the constraints with your colleagues you decide that the following approach would be best: You are going to use Terraform to automate the setup and tear down of the cloud infrastructure. This is necessary because if you continuously use the cloud service you will not fit in the budget. You will use instance pools to manage the variable number of cloud servers and Network Load Balancers [TODO add link] to balance the traffic between them. You will set up a dedicated monitoring and management instance which will run Prometheus to automatically monitor a varying number of servers. You will write a custom service discovery agent that creates a file with the IP addresses of the machines in the instance pool for Prometheus to consume. On the instance pool you will deploy the Prometheus node exporter to monitor CPU usage. You will install Grafana to provide a monitoring dashboard and the ability to send webhooks. You will configure an alert webhook in Grafana that sends a webhook to an application written by you. If the average CPU usage is above 80%, or below 20% to scale up or down respectively a webhook is sent. You will write an application that receives this webhook and every 60 seconds scales the instance pool up or down if a webhook has been received. As you also have to demonstrate to the client that you can work in an agile methodology you agree in 4 week sprints with a demo at the end of each sprint as outlined in the deadlines document.","title":"Project work"},{"location":"testing/","text":"Tests will be conducted starting in December 2020. The exam will last 120 minute and consist of a multiple choice test. During the test you will be required to obey the following rules: Have an empty room with no disturbances. Close all other applications except for the single browser window the test runs in. Remove all electronic devices and notes from your desk and person. No phones, no smartwatches of any kind are allowed. Unless medically required no food is allowed during the test and only clear liquids in clear, unlabeled containers are allowed. During the test you will not be allowed to talk. You will be required to turn on your camera the entire time during the test. You will also be required to show that your environment suits the criteria described above. You will be required to turn on your screen sharing during the entire test.","title":"Testing"}]}